{"version":3,"sources":["lib.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_NOTES","Map","INTERVALS","CHORDS","Note","name","letter_index","base_class","pitch_class","this","other","unparsed_note","m","match","letter","accidentals","has","SyntaxError","search","get","split","reduce","acc","c","nth","n","s","toString","chordInfo","notes","i","indices","map","b","Array","from","length","keys","_","k","a","arraysEqual","unshift","pop","inversion","fixed","splice","concat","chord_type","intervals","join","components","Error","App","useState","input","setInput","label","setLabel","labelColor","setLabelColor","Fragment","setComponents","setLabelWrapper","valid","undefined","useEffect","unparsed_notes","distance","processNotes","matchAll","parse","COMPONENTS","items","key","e","message","Container","id","Accordion","Card","Header","Body","InputGroup","Prepend","Text","FormControl","placeholder","value","onChange","target","text","Toggle","as","Button","variant","eventKey","Collapse","Table","size","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ccfe6aed.chunk.js","sourcesContent":["\n// Base note pitch classes (and helper indices)\nconst BASE_NOTES = new Map([\n    ['C', [ 0, 0]],\n    ['D', [ 2, 1]],\n    ['E', [ 4, 2]],\n    ['F', [ 5, 3]],\n    ['G', [ 7, 4]],\n    ['A', [ 9, 5]],\n    ['B', [11, 6]]\n]);\n\n// Validated intervals and their names\nconst INTERVALS = new Map([\n    [0, 'Unison'],\n    [1, 'Minor second'],\n    [2, 'Major second'],\n    [3, 'Minor third'],\n    [4, 'Major third'],\n    [5, 'Perfect fourth'],\n    [6, 'Tritone'],\n    [7, 'Perfect fifth'],\n    [8, 'Minor sixth'],\n    [9, 'Major sixth'],\n    [10, 'Minor seventh'],\n    [11, 'Major seventh']\n]);\n\n// Validated chord intervals and their names\nconst CHORDS = new Map([\n    // Triads\n    [ '4,3', 'major triad' ],\n    [ '3,4', 'minor triad' ],\n    [ '3,3', 'diminished triad' ],\n    [ '4,4', 'augmented triad' ],\n    // Seventh chords\n    [ '4,3,4', 'major 7th' ],\n    [ '4,3,3', 'dominant 7th' ],\n    [ '3,4,3', 'minor 7th' ],\n    [ '3,4,4', 'minor major 7th' ],\n    [ '3,3,3', 'half diminished 7th' ],\n    [ '3,3,2', 'fully diminished 7th' ],\n]);\n\n/**\n * Note encapsulation.\n *\n * Contains the specified name of the note, the pitch class of the base note letter (calling this\n * the base class), and the pitch class of the note (with accidentals).\n */\nexport class Note {\n    name: string;\n    letter_index: number;\n    base_class: number;\n    pitch_class: number;\n\n    private constructor(name: string, letter_index: number, base_class: number, pitch_class: number) {\n        this.name = name;\n        this.letter_index = letter_index;\n        this.base_class = base_class;\n        this.pitch_class = pitch_class;\n    }\n\n    /**\n     * Parse a string as a note.\n     * @param {string} unparsed_note - Unparsed note string\n     * @return {Note} Parsed Note object\n     * @throws {SyntaxError} A note string contained an invalid note letter/accidental character\n     */\n    static parse(unparsed_note: string): Note {\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        const m = unparsed_note.match(/(\\S)(\\S*)/)!;\n        const [letter, accidentals] = [m[1], m[2]];\n        if (!BASE_NOTES.has(letter)) {\n            throw new SyntaxError('Invalid note letter in \"'+unparsed_note+'\"');\n        }\n        if (accidentals.search(/[^#b]/) >= 0) {\n            throw new SyntaxError('Invalid accidentals in \"'+unparsed_note+'\"');\n        }\n\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        const [base_class, letter_index] = BASE_NOTES.get(letter)!;\n        const shift = accidentals.split('').reduce((acc, c) => acc + (c === '#' ? 1 : -1), 0);\n        const pitch_class = base_class + shift;\n\n        return new Note(unparsed_note, letter_index, base_class, pitch_class);\n    }\n\n    /**\n     * Get distance from another note in semitones.\n     * @param {Note} other - Another note\n     * @return {number} Distance in semitones\n     */\n    distance(other: Note): number {\n        return (other.pitch_class - this.pitch_class + 12) % 12;\n    }\n}\n\n/**\n * Parse whitespace delimited note strings.\n * @param {string} unparsed_notes - Whitespace delimited notes\n * @return {Array<Note>} Array of parsed notes\n */\nexport function parseNotes(unparsed_notes: string): Array<Note> {\n    return Array.from(unparsed_notes.matchAll(/(\\S+)\\s*/g))\n        .map((m) => Note.parse(m[1]));\n}\n\n// Number to English ordinal\nfunction nth(n: number): string {\n    const s = n.toString();\n    switch (n) {\n        case 1:  return s+'st';\n        case 2:  return s+'nd';\n        case 3:  return s+'rd';\n        default: return s+'th';\n    }\n}\n\nfunction arraysEqual<T>(a: Array<T>, b: Array<T>): boolean {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction inversion(notes: Array<Note>): number {\n    const indices = notes.map(n => n.letter_index);\n    const b = Array.from(Array(indices.length).keys()).map((_, k) => k * 2);\n    for (let i = 0; i < notes.length; i++) {\n        const s = indices[0];\n        const a = indices.map(i => (i - s + 7) % 7);\n        if (arraysEqual(a, b)) {\n            return i;\n        }\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n        indices.unshift(indices.pop()!);\n    }\n    return -1;\n}\n\nfunction intervals(notes: Array<Note>): Array<number> {\n    const n = notes.length - 1;\n    const intervals = Array(n);\n    for (let i = 0; i < n; i++) {\n        const a = notes[i].pitch_class;\n        const b = notes[i + 1].pitch_class;\n        intervals[i] = (b - a + 12) % 12;\n    }\n    return intervals;\n}\n\n/**\n * Attempt to interpret an array notes as a chord.\n * @param {Array<Note>} notes - Array of notes\n * @return {[string, Array<string>]} Tuple of the interpreted chord name and components (root, third, etc.)\n * @throws {Error} Notes do not form a conventional chord\n */\nfunction chordInfo(notes: Array<Note>): [string, Array<string>] {\n    const i = inversion(notes);\n    if (i >= 0) {\n        const tail: Array<Note> = notes.splice(notes.length - i, i);\n        const fixed = tail.concat(notes);\n        const chord_type = CHORDS.get(intervals(fixed).join());\n        if (chord_type) {\n            const name = fixed[0].name + ' ' + chord_type;\n            const components = fixed.map(n => n.name);\n            if (i === 0) {\n                return [name, components];\n            } else {\n                return [name + ' (' + nth(i) + ' inversion)', components];\n            }\n        }\n    }\n    throw new Error(\"Invalid chord\");\n}\n\n/**\n * Interpret an array of notes.\n *\n * For the number of notes in the array:\n * - 1: The note name\n * - 2: The interval between the notes\n * - 3: The triad built upon the first note\n * - 4: The seventh chord built upon the first note\n * @param {Array<note>} notes - Array of notes\n * @return {[string, Array<string>]} Tuple of the interpreted name and any components (root, third, etc.)\n */\nexport function processNotes(notes: Array<Note>): [string, Array<string> | undefined] {\n    switch (notes.length) {\n        case 1: {\n            return [notes[0].name, undefined];\n        }\n        case 2: {\n            const a = notes[0];\n            const b = notes[1];\n            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n            return [INTERVALS.get(a.distance(b))!, undefined];\n        }\n        case 3:\n        case 4: {\n            return chordInfo(notes);\n        }\n        default: {\n            throw new Error('Only up to four notes (seventh chords) supported')\n        }\n\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Accordion, Button, Card, Container, InputGroup, FormControl, Table } from 'react-bootstrap';\nimport './App.scss';\nimport { parseNotes, processNotes } from './lib';\n\n/* eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types */\nfunction App() {\n    const [input, setInput] = useState('');\n    const [label, setLabel] = useState('');\n    const [labelColor, setLabelColor] = useState<'danger' | undefined>();\n    const [components, setComponents] = useState(<React.Fragment/>);\n\n    const PLACEHOLDER = 'C E G';\n\n    const setLabelWrapper = (s: string, valid: boolean) => {\n        setLabelColor(valid ? undefined : 'danger');\n        setLabel(s);\n    };\n\n    useEffect(() => {\n        const s = input || PLACEHOLDER;\n        try {\n            const notes = parseNotes(s);\n            const [name, components] = processNotes(notes);\n            setLabelWrapper(name, true);\n            if (components) {\n                const COMPONENTS = [\n                    \"Root\",\n                    \"Third\",\n                    \"Fifth\",\n                    \"Seventh\"\n                ];\n\n                const items = <React.Fragment>\n                    {\n                        components.map((name, i) => <tr key={i}>\n                            <td>{COMPONENTS[i]}</td>\n                            <td>{name}</td>\n                        </tr>)\n                    }\n                </React.Fragment>;\n                setComponents(items);\n            } else {\n                setComponents(<React.Fragment/>);\n            }\n        } catch(e) {\n            setLabelWrapper(e.message, false);\n        }\n    }, [input]);\n\n    return (\n        <Container id='main'>\n            <Accordion>\n                <Card>\n                    <Card.Header>\n                        Chord Solver\n                    </Card.Header>\n                    <Card.Body>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>Notes</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                placeholder={PLACEHOLDER}\n                                value={input}\n                                onChange={e => setInput(e.target.value)}\n                            />\n                        </InputGroup>\n                    </Card.Body>\n                </Card>\n                <Card text={labelColor}>\n                    <Card.Body id=\"label\">\n                        {label}\n                    </Card.Body>\n                </Card>\n                <Card>\n                    <Card.Header id=\"components-header\">\n                        <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                        >\n                            Components\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <Table id=\"components\" size=\"sm\">\n                                <tbody>\n                                    {components}\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </Container>\n    );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n\n"],"sourceRoot":""}