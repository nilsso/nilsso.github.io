{"version":3,"sources":["lib.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_NOTES","Map","INTERVALS","Note","note","pitch_class","this","other","unparsed_note","m","match","SyntaxError","letter","accidentals","has","search","get","split","reduce","acc","c","App","useState","input","setInput","variant","setVariant","label","setLabel","setChord","s","valid","useEffect","unparsed_notes","result","notes","a","b","length","distance","Error","processNotes","Array","from","matchAll","map","parse","e","message","Container","id","Card","Header","ListGroup","Item","InputGroup","Prepend","Text","FormControl","placeholder","value","onChange","target","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a18c7ea3.chunk.js","sourcesContent":["const BASE_NOTES = new Map([\n    ['C', 0],\n    ['D', 2],\n    ['E', 4],\n    ['F', 5],\n    ['G', 7],\n    ['A', 9],\n    ['B', 11]\n]);\n\nconst INTERVALS = new Map([\n    [0, 'Unison'],\n    [1, 'Minor second'],\n    [2, 'Major second'],\n    [3, 'Minor third'],\n    [4, 'Major third'],\n    [5, 'Perfect fourth'],\n    [6, 'Tritone'],\n    [7, 'Perfect fifth'],\n    [8, 'Minor sixth'],\n    [9, 'Major sixth'],\n    [10, 'Minor seventh'],\n    [11, 'Major seventh']\n]);\n\n/**\n * Note abstraction.\n *\n * Contains only a specified name and pitch class for a note.\n *\n * Examples\n * ```\n * const note = Note.parse('G#');\n * assert(note.note === \"G#\");\n * assert(note.pitch_class === 8);\n * ```\n */\nexport class Note {\n    note: string;\n    pitch_class: number;\n\n    private constructor(note: string, pitch_class: number) {\n        this.note = note;\n        this.pitch_class = pitch_class;\n    }\n\n    /**\n     * Parse\n     */\n    static parse(unparsed_note: string): Note {\n        let m = unparsed_note.match(/(\\S)(\\S*)/);\n        if (m === null) throw new SyntaxError('Malformed note \"'+unparsed_note+'\"');\n        let [letter, accidentals] = [m[1], m[2]];\n        if (!BASE_NOTES.has(letter)) throw new SyntaxError('Invalid note letter in \"'+unparsed_note+'\"');\n        if (accidentals.search(/[^#b]/) >= 0) throw new SyntaxError('Invalid accidentals in \"'+unparsed_note+'\"');\n\n        const base_pitch_class = BASE_NOTES.get(letter)!;\n        const pitch_class = base_pitch_class + accidentals.split('')\n            .reduce((acc, c) => acc + (c === '#' ? 1 : -1), 0);\n\n        return new Note(unparsed_note, pitch_class);\n    }\n\n    /**\n     * Get distance from another note in semitones\n     * @param {Note} other - Another note\n     * @return {number} - Distance in semitones\n     */\n    distance(other: Note): number {\n        return (other.pitch_class - this.pitch_class + 12) % 12;\n    }\n}\n\n/**\n * Parse whitespace delimited note strings.\n * @param {string} unparsed_notes - Whitespace delimited notes\n * @return {Array<Note>} - Array of parsed notes\n */\nexport function parseNotes(unparsed_notes: string): Array<Note> {\n    return Array.from(unparsed_notes.matchAll(/(\\S+)\\s*/g))\n        .map(([_, unparsed_note]) => Note.parse(unparsed_note));\n}\n\n/**\n * Interpret an array of notes.\n *\n * For the number of notes in the array:\n * - 1: The note name\n * - 2: The interval between the notes\n * - 3: The triad built upon the first note\n * - 4: The seventh chord built upon the first note\n * @param {Array<note>} notes - Array of notes\n * @param {string} - Intepreted result\n */\nexport function processNotes(notes: Array<Note>): string {\n    const [a, b, c, d] = notes;\n\n    switch (notes.length) {\n        case 1: {\n            return a.note;\n        }\n        case 2: {\n            return INTERVALS.get(a.distance(b))!;\n        }\n        case 3: {\n            return 'Triad';\n        }\n        case 4: {\n            return 'Seventh chord';\n        }\n        default: {\n            throw new Error('Only up to four notes (seventh chords) supported')\n        }\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card, Container, InputGroup, FormControl, ListGroup } from 'react-bootstrap';\nimport './App.scss';\nimport { parseNotes, processNotes } from './lib';\n\nfunction App() {\n    const [input, setInput] = useState('');\n    const [variant, setVariant] = useState('');\n    const [label, setLabel] = useState('');\n\n    const PLACEHOLDER = 'C E G';\n\n    const setChord = (s: string, valid: boolean) => {\n        setVariant(valid ? '' : 'danger');\n        setLabel(s);\n    };\n\n    useEffect(() => {\n        const s = input || PLACEHOLDER;\n        try {\n            const notes = parseNotes(s);\n            const result = processNotes(notes);\n            setChord(result, true);\n        } catch(e) {\n            setChord(e.message, false);\n        }\n    }, [input]);\n\n    return (\n        <Container id='main'>\n            <Card>\n                <Card.Header>\n                    Chord Solver\n                </Card.Header>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>Notes</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                placeholder={PLACEHOLDER}\n                                value={input}\n                                onChange={e => setInput(e.target.value)}\n                            />\n                        </InputGroup>\n                    </ListGroup.Item>\n                    <ListGroup.Item variant={variant} id='label'>\n                        {label}\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n\n"],"sourceRoot":""}