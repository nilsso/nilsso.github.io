{"version":3,"sources":["lib.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_NOTES","Map","INTERVALS","CHORDS","Note","name","base_class","pitch_class","this","other","unparsed_note","m","match","letter","accidentals","has","SyntaxError","search","get","split","reduce","acc","c","intervals","pitch_classes","n","length","Array","i","a","b","pitchClassIntervals","notes","map","baseClassIntervals","nth","s","toString","processNotes","undefined","distance","console","log","join","chord_type","components","Error","unshift","pop","chordName","App","useState","input","setInput","label","setLabel","labelColor","setLabelColor","Fragment","setComponents","setLabelWrapper","valid","useEffect","unparsed_notes","from","matchAll","parse","COMPONENTS","items","key","e","message","Container","id","Accordion","Card","Header","Body","InputGroup","Prepend","Text","FormControl","placeholder","value","onChange","target","text","Toggle","as","Button","variant","eventKey","Collapse","Table","size","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sRAEMA,EAAa,IAAIC,IAAI,CACvB,CAAC,IAAK,GACN,CAAC,IAAK,GACN,CAAC,IAAK,GACN,CAAC,IAAK,GACN,CAAC,IAAK,GACN,CAAC,IAAK,GACN,CAAC,IAAK,MAIJC,EAAY,IAAID,IAAI,CACtB,CAAC,EAAG,UACJ,CAAC,EAAG,gBACJ,CAAC,EAAG,gBACJ,CAAC,EAAG,eACJ,CAAC,EAAG,eACJ,CAAC,EAAG,kBACJ,CAAC,EAAG,WACJ,CAAC,EAAG,iBACJ,CAAC,EAAG,eACJ,CAAC,EAAG,eACJ,CAAC,GAAI,iBACL,CAAC,GAAI,mBAIHE,EAAS,IAAIF,IAAI,CAEnB,CAAE,MAAO,eACT,CAAE,MAAO,eACT,CAAE,MAAO,oBACT,CAAE,MAAO,mBAET,CAAE,QAAS,aACX,CAAE,QAAS,gBACX,CAAE,QAAS,aACX,CAAE,QAAS,mBACX,CAAE,QAAS,uBACX,CAAE,QAAS,0BASFG,EAAb,WAKI,WAAoBC,EAAcC,EAAoBC,GAAsB,yBAJ5EF,UAI2E,OAH3EC,gBAG2E,OAF3EC,iBAE2E,EACvEC,KAAKH,KAAOA,EACZG,KAAKF,WAAaA,EAClBE,KAAKD,YAAcA,EAR3B,qDAuCaE,GACL,OAAQA,EAAMF,YAAcC,KAAKD,YAAc,IAAM,MAxC7D,6BAiBiBG,GACT,IAAIC,EAAID,EAAcE,MAAM,aADU,EAEV,CAACD,EAAE,GAAIA,EAAE,IAAhCE,EAFiC,KAEzBC,EAFyB,KAGtC,IAAKd,EAAWe,IAAIF,GAChB,MAAM,IAAIG,YAAY,2BAA2BN,EAAc,KAEnE,GAAII,EAAYG,OAAO,UAAY,EAC/B,MAAM,IAAID,YAAY,2BAA2BN,EAAc,KAGnE,IAAMJ,EAAaN,EAAWkB,IAAIL,GAIlC,OAAO,IAAIT,EAAKM,EAAeJ,EAFXA,EADNQ,EAAYK,MAAM,IAAIC,QAAO,SAACC,EAAKC,GAAN,OAAYD,GAAa,MAANC,EAAY,GAAK,KAAI,QA5B3F,KA2DA,SAASC,EAAUC,GAGf,IAFA,IAAMC,EAAID,EAAcE,OAAS,EAC7BH,EAAYI,MAAMF,GACbG,EAAI,EAAGA,EAAIH,EAAGG,IAAK,CACxB,IAAMC,EAAIL,EAAcI,GAClBE,EAAIN,EAAcI,EAAI,GAC5BL,EAAUK,IAAME,EAAID,EAAI,IAAM,GAElC,OAAON,EAIX,IAAMQ,EAAsB,SAACC,GAAD,OAAuCT,EAAUS,EAAMC,KAAI,SAAAR,GAAC,OAAIA,EAAElB,iBACxF2B,EAAsB,SAACF,GAAD,OAAuCT,EAAUS,EAAMC,KAAI,SAAAR,GAAC,OAAIA,EAAEnB,gBAG9F,SAAS6B,EAAIV,GACT,IAAMW,EAAIX,EAAEY,WACZ,OAAQZ,GACJ,KAAK,EAAI,OAAOW,EAAE,KAClB,KAAK,EAAI,OAAOA,EAAE,KAClB,KAAK,EAAI,OAAOA,EAAE,KAClB,QAAS,OAAOA,EAAE,MA4CnB,SAASE,EAAaN,GACzB,OAAQA,EAAMN,QACV,KAAK,EACD,MAAO,CAACM,EAAM,GAAG3B,UAAMkC,GAE3B,KAAK,EACD,IAAMV,EAAIG,EAAM,GACVF,EAAIE,EAAM,GAChB,MAAO,CAAC9B,EAAUgB,IAAIW,EAAEW,SAASV,SAAMS,GAE3C,KAAK,EACL,KAAK,EACD,OA9CZ,SAAmBP,GACf,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAMN,OAAQE,IAAK,CACnC,IAAML,EAAYW,EAAmBF,GAErC,GADAS,QAAQC,IAAInB,GACRpB,EAAOY,IAAIQ,EAAUoB,QAAS,CAC9B,IAAMC,EAAazC,EAAOe,IAAIa,EAAoBC,GAAOW,QACzD,GAAIC,EAAY,CACZ,IAAMvC,EAAO2B,EAAM,GAAG3B,KAAO,IAAMuC,EAC7BC,EAAab,EAAMC,KAAI,SAAAR,GAAC,OAAIA,EAAEpB,QACpC,OAAU,IAANuB,EACO,CAACvB,EAAMwC,GAEP,CAACxC,EAAO,KAAO8B,EAAIP,GAAK,cAAeiB,GAGlD,MAAM,IAAIC,MAAM,iBAGxBd,EAAMe,QAAQf,EAAMgB,OAExB,MAAM,IAAIF,MAAM,iBA0BDG,CAAUjB,GAErB,QACI,MAAM,IAAIc,MAAM,qDC1FbI,MA/Ff,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAEJG,EAFI,KAEGC,EAFH,OAGyBJ,qBAHzB,mBAGJK,EAHI,KAGQC,EAHR,OAIyBN,mBAAS,kBAAC,IAAMO,SAAP,OAJlC,mBAIJb,EAJI,KAIQc,EAJR,KAQLC,EAAkB,SAACxB,EAAWyB,GAChCJ,EAAcI,OAAQtB,EAAY,UAClCgB,EAASnB,IAmCb,OAhCA0B,qBAAU,WACN,IDgFmBC,EChFb3B,EAAIgB,GARM,QAShB,IACI,IADA,EAE2Bd,GD6EZyB,EC9EU3B,ED+E1BT,MAAMqC,KAAKD,EAAeE,SAAS,cACrChC,KAAI,mCAAKvB,GAAL,kBAAwBN,EAAK8D,MAAMxD,QCjFpC,mBAEOL,EAFP,KAEawC,EAFb,KAKA,GAFAJ,QAAQC,IAAIG,GACZe,EAAgBvD,GAAM,GAClBwC,EAAY,CACZ,IAAMsB,EAAa,CACf,OACA,QACA,QACA,WAGEC,EAAQ,kBAAC,IAAMV,SAAP,KAENb,EAAWZ,KAAI,SAAC5B,EAAMuB,GAAP,OAAa,wBAAIyC,IAAKzC,GACjC,4BAAKuC,EAAWvC,IAChB,4BAAKvB,QAIjBsD,EAAcS,QAEdT,EAAc,kBAAC,IAAMD,SAAP,OAEpB,MAAMY,GACJV,EAAgBU,EAAEC,SAAS,MAEhC,CAACnB,IAGA,kBAACoB,EAAA,EAAD,CAAWC,GAAG,QACV,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,qBAGA,kBAACD,EAAA,EAAKE,KAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWE,KAAZ,eAEJ,kBAACC,EAAA,EAAD,CACIC,YApDR,QAqDQC,MAAO/B,EACPgC,SAAU,SAAAd,GAAC,OAAIjB,EAASiB,EAAEe,OAAOF,aAKjD,kBAACR,EAAA,EAAD,CAAMW,KAAM9B,GACR,kBAACmB,EAAA,EAAKE,KAAN,CAAWJ,GAAG,SACTnB,IAGT,kBAACqB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaH,GAAG,qBACZ,kBAACC,EAAA,EAAUa,OAAX,CACIC,GAAIC,IACJC,QAAQ,OACRC,SAAS,KAHb,eAQJ,kBAACjB,EAAA,EAAUkB,SAAX,CAAoBD,SAAS,KACzB,kBAAChB,EAAA,EAAKE,KAAN,KACI,kBAACgB,EAAA,EAAD,CAAOpB,GAAG,aAAaqB,KAAK,MACxB,+BACKjD,UC7E/BkD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvF,MACvB,2DA8CN,SAASwF,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BxE,QAAQC,IACN,iHAKE4D,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBlE,QAAQC,IAAI,sCAGR4D,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL5E,QAAQ4E,MAAM,4CAA6CA,MCnGjEC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDoBrB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImB,IACpBC,cACA1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,cAAN,sBAEP5B,IAgEV,SAAiCM,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQ9G,IAAI,gBAEnB,MAApB+G,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL3E,QAAQC,IACN,oEAvFA8F,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCjE,QAAQC,IACN,iHAMJ0D,EAAgBC,EAAOC,OChD/BE,K","file":"static/js/main.074739b1.chunk.js","sourcesContent":["\n// Base note pitch classes\nconst BASE_NOTES = new Map([\n    ['C', 0],\n    ['D', 2],\n    ['E', 4],\n    ['F', 5],\n    ['G', 7],\n    ['A', 9],\n    ['B', 11]\n]);\n\n// Validated intervals and their names\nconst INTERVALS = new Map([\n    [0, 'Unison'],\n    [1, 'Minor second'],\n    [2, 'Major second'],\n    [3, 'Minor third'],\n    [4, 'Major third'],\n    [5, 'Perfect fourth'],\n    [6, 'Tritone'],\n    [7, 'Perfect fifth'],\n    [8, 'Minor sixth'],\n    [9, 'Major sixth'],\n    [10, 'Minor seventh'],\n    [11, 'Major seventh']\n]);\n\n// Validated chord intervals and their names\nconst CHORDS = new Map([\n    // Triads\n    [ '4,3', 'major triad' ],\n    [ '3,4', 'minor triad' ],\n    [ '3,3', 'diminished triad' ],\n    [ '4,4', 'augmented triad' ],\n    // Seventh chords\n    [ '4,3,4', 'major 7th' ],\n    [ '4,3,3', 'dominant 7th' ],\n    [ '3,4,3', 'minor 7th' ],\n    [ '3,4,4', 'minor major 7th' ],\n    [ '3,3,3', 'half diminished 7th' ],\n    [ '3,3,2', 'fully diminished 7th' ],\n]);\n\n/**\n * Note encapsulation.\n *\n * Contains the specified name of the note, the pitch class of the base note letter (calling this\n * the base class), and the pitch class of the note (with accidentals).\n */\nexport class Note {\n    name: string;\n    base_class: number;\n    pitch_class: number;\n\n    private constructor(name: string, base_class: number, pitch_class: number) {\n        this.name = name;\n        this.base_class = base_class;\n        this.pitch_class = pitch_class;\n    }\n\n    /**\n     * Parse a string as a note.\n     * @param {string} unparsed_note - Unparsed note string\n     * @return {Note} - Parsed Note object\n     * @throws {SyntaxError} A note string contained an invalid note letter/accidental character\n     */\n    static parse(unparsed_note: string): Note {\n        let m = unparsed_note.match(/(\\S)(\\S*)/)!;\n        let [letter, accidentals] = [m[1], m[2]];\n        if (!BASE_NOTES.has(letter)) {\n            throw new SyntaxError('Invalid note letter in \"'+unparsed_note+'\"');\n        }\n        if (accidentals.search(/[^#b]/) >= 0) {\n            throw new SyntaxError('Invalid accidentals in \"'+unparsed_note+'\"');\n        }\n\n        const base_class = BASE_NOTES.get(letter)!;\n        const shift = accidentals.split('').reduce((acc, c) => acc + (c === '#' ? 1 : -1), 0);\n        const pitch_class = base_class + shift;\n\n        return new Note(unparsed_note, base_class, pitch_class);\n    }\n\n    /**\n     * Get distance from another note in semitones.\n     * @param {Note} other - Another note\n     * @return {number} - Distance in semitones\n     */\n    distance(other: Note): number {\n        return (other.pitch_class - this.pitch_class + 12) % 12;\n    }\n}\n\n/**\n * Parse whitespace delimited note strings.\n * @param {string} unparsed_notes - Whitespace delimited notes\n * @return {Array<Note>} - Array of parsed notes\n */\nexport function parseNotes(unparsed_notes: string): Array<Note> {\n    return Array.from(unparsed_notes.matchAll(/(\\S+)\\s*/g))\n        .map(([_, unparsed_note]) => Note.parse(unparsed_note));\n}\n\n/**\n * Get intervals between pitch classes.\n * @param {Array<number} pitch_classes - Array of pitch classes\n * @return {Array<number>} Array of intervals\n */\nfunction intervals(pitch_classes: Array<number>): Array<number> {\n    const n = pitch_classes.length - 1;\n    let intervals = Array(n);\n    for (let i = 0; i < n; i++) {\n        const a = pitch_classes[i];\n        const b = pitch_classes[i + 1];\n        intervals[i] = (b - a + 12) % 12;\n    }\n    return intervals;\n}\n\n// Note interval helpers\nconst pitchClassIntervals = (notes: Array<Note>): Array<number> => intervals(notes.map(n => n.pitch_class));\nconst baseClassIntervals  = (notes: Array<Note>): Array<number> => intervals(notes.map(n => n.base_class));\n\n// Number to English ordinal\nfunction nth(n: number): string {\n    const s = n.toString();\n    switch (n) {\n        case 1:  return s+'st';\n        case 2:  return s+'nd';\n        case 3:  return s+'rd';\n        default: return s+'th';\n    }\n}\n\n/**\n * Attempt to interpret an array notes as a chord.\n * @param {Array<Note>} notes - Array of notes\n * @return {[string, Array<string>]} Tuple of the interpreted chord name and components (root, third, etc.)\n * @throws {Error} Notes do not form a conventional chord\n */\nfunction chordName(notes: Array<Note>): [string, Array<string>] {\n    for (let i = 0; i < notes.length; i++) {\n        const intervals = baseClassIntervals(notes);\n        console.log(intervals);\n        if (CHORDS.has(intervals.join())) {\n            const chord_type = CHORDS.get(pitchClassIntervals(notes).join());\n            if (chord_type) {\n                const name = notes[0].name + ' ' + chord_type;\n                const components = notes.map(n => n.name);\n                if (i === 0) {\n                    return [name, components];\n                } else {\n                    return [name + ' (' + nth(i) + ' inversion)', components];\n                }\n            } else {\n                throw new Error(\"Invalid chord\");\n            }\n        }\n        notes.unshift(notes.pop()!);\n    }\n    throw new Error(\"Invalid chord\");\n}\n\n/**\n * Interpret an array of notes.\n *\n * For the number of notes in the array:\n * - 1: The note name\n * - 2: The interval between the notes\n * - 3: The triad built upon the first note\n * - 4: The seventh chord built upon the first note\n * @param {Array<note>} notes - Array of notes\n * @return {[string, Array<string>]} Tuple of the interpreted name and any components (root, third, etc.)\n */\nexport function processNotes(notes: Array<Note>): [string, Array<string> | undefined] {\n    switch (notes.length) {\n        case 1: {\n            return [notes[0].name, undefined];\n        }\n        case 2: {\n            const a = notes[0];\n            const b = notes[1];\n            return [INTERVALS.get(a.distance(b))!, undefined];\n        }\n        case 3:\n        case 4: {\n            return chordName(notes);\n        }\n        default: {\n            throw new Error('Only up to four notes (seventh chords) supported')\n        }\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Accordion, Button, Card, Container, InputGroup, FormControl, Table } from 'react-bootstrap';\nimport './App.scss';\nimport { parseNotes, processNotes } from './lib';\n\nfunction App() {\n    const [input, setInput] = useState('');\n    const [label, setLabel] = useState('');\n    const [labelColor, setLabelColor] = useState<'danger' | undefined>();\n    const [components, setComponents] = useState(<React.Fragment/>);\n\n    const PLACEHOLDER = 'C E G';\n\n    const setLabelWrapper = (s: string, valid: boolean) => {\n        setLabelColor(valid ? undefined : 'danger');\n        setLabel(s);\n    };\n\n    useEffect(() => {\n        const s = input || PLACEHOLDER;\n        try {\n            const notes = parseNotes(s);\n            const [name, components] = processNotes(notes);\n            console.log(components);\n            setLabelWrapper(name, true);\n            if (components) {\n                const COMPONENTS = [\n                    \"Root\",\n                    \"Third\",\n                    \"Fifth\",\n                    \"Seventh\"\n                ];\n\n                const items = <React.Fragment>\n                    {\n                        components.map((name, i) => <tr key={i}>\n                            <td>{COMPONENTS[i]}</td>\n                            <td>{name}</td>\n                        </tr>)\n                    }\n                </React.Fragment>;\n                setComponents(items);\n            } else {\n                setComponents(<React.Fragment/>);\n            }\n        } catch(e) {\n            setLabelWrapper(e.message, false);\n        }\n    }, [input]);\n\n    return (\n        <Container id='main'>\n            <Accordion>\n                <Card>\n                    <Card.Header>\n                        Chord Solver\n                    </Card.Header>\n                    <Card.Body>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>Notes</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                placeholder={PLACEHOLDER}\n                                value={input}\n                                onChange={e => setInput(e.target.value)}\n                            />\n                        </InputGroup>\n                    </Card.Body>\n                </Card>\n                <Card text={labelColor}>\n                    <Card.Body id=\"label\">\n                        {label}\n                    </Card.Body>\n                </Card>\n                <Card>\n                    <Card.Header id=\"components-header\">\n                        <Accordion.Toggle\n                            as={Button}\n                            variant=\"link\"\n                            eventKey=\"0\"\n                        >\n                            Components\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <Table id=\"components\" size=\"sm\">\n                                <tbody>\n                                    {components}\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n\n"],"sourceRoot":""}