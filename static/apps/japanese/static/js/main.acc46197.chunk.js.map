{"version":3,"sources":["util.ts","LangModule.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["random_index","arr","console","assert","length","Math","floor","random","random_element","Fragment","fragment_template","meaning_template","this","vocabulary","fragment","slice","meaning","i","matchAll","m","token","vocab","vocab_meaning","replace","RegExp","LangModuleMask","enabled","fragments","LangModule","name","indices","populate","random_with_vocabulary","json_fragments","weights","t","push","json","a","b","u","v","unzip","unzip_fragments","forEach","w","Array","keys","modules","mask","res","empty","shift","concat","j","Object","entries","p","c","fill","toggle_mask","value","url","fetch","then","response","data","module_data","catch","e","alert","Source","props","source","setSource","useState","setValue","Row","Col","className","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","target","Append","Button","variant","onClick","GeneratorComponent","joined","enabledMask","generated","setGenerated","setMeaning","hidden","setHidden","swap","setSwap","some_enabled","some","help","Popover","id","Title","as","Content","Badge","disabled","Tooltip","Card","Header","OverlayTrigger","trigger","placement","overlay","ListGroup","Item","show","ButtonGroup","active","ModulesComponent","setEnabledMask","fragmentMask","setFragmentMask","vocabularyMask","setVocabularyMask","toggleAll","checked","module_components","map","lang_module","LangModuleComponent","key","enabledFlag","fragmentFlag","vocabularyFlag","setEnabledFlag","setFragmentFlag","setVocabularyFlag","has_fragments","has_vocabulary","Accordion","Body","toggle","ToggleButton","type","size","currentTarget","FragmentListComponent","VocabularyListComponent","rows","s","Toggle","eventKey","Collapse","Container","fluid","vocabulary_rows","choices","token_rows","App","setModules","setJoined","useEffect","requestJSON","from_json","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.acc46197.chunk.js","sourcesContent":["export function random_index<T>(arr: Array<T>): number {\n    console.assert(arr.length > 0);\n    return Math.floor(Math.random() * arr.length);\n}\n\nexport function random_element<T>(arr: Array<T>): T {\n    return arr[random_index(arr)];\n}\n\nexport function remove_random<T>(arr: Array<T>): T | undefined {\n    let i = random_index(arr);\n    return arr.splice(i, 1).pop();\n}\n\nexport function clone_reg_exp(input: RegExp, injectFlags: string) {\n    let pattern = input.source;\n    let flags = \"\";\n    injectFlags = (injectFlags || \"\");\n\n    if (input.global || ( /g/i ).test(injectFlags) ) { flags += \"g\"; }\n    if (input.ignoreCase || ( /i/i ).test(injectFlags) ) { flags += \"i\"; }\n    if (input.multiline || ( /m/i ).test(injectFlags) ) { flags += \"m\"; }\n\n    return(new RegExp(pattern, flags));\n}\n\nexport function unzip<A, B>(arr: Array<[A, B]>): [Array<A>, Array<B>] {\n    //let unzipped = [...arr[0]].map((_, i) => arr.map(row => row[i]));\n    //return [unzipped[0], unzipped[1]];\n    let a: Array<A> = [];\n    let b: Array<B> = [];\n    for (let [u, v] of arr) {\n        a.push(u);\n        b.push(v);\n    }\n    return [a, b];\n}\n\n","import { random_element, unzip } from \"./util\";\n\nexport class Fragment {\n    fragment_template: string;\n    meaning_template: string;\n\n    constructor(fragment_template: string, meaning_template: string) {\n        this.fragment_template = fragment_template;\n        this.meaning_template = meaning_template;\n    }\n\n    populate(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\n        let fragment = this.fragment_template.slice();\n        let meaning = this.meaning_template.slice();\n        let i = 1;\n        for (let m of this.fragment_template.matchAll(/\\{\\{.+}}/g)) {\n            if (m) {\n                let token = m[0];\n                if (token in vocabulary && vocabulary[token].length > 0) {\n                    let [vocab, vocab_meaning] = random_element(vocabulary[token]);\n                    fragment = fragment.replace(token, vocab);\n                    meaning = meaning.replace(new RegExp(\"\\\\{\\\\{\" + i + \"}}\", \"g\"), vocab_meaning);\n                }\n            }\n            i += 1;\n        }\n        return [fragment, meaning];\n    }\n}\n\nexport class LangModuleMask {\n    enabled: Array<boolean>;\n    fragments: Array<boolean>;\n    vocabulary: Array<boolean>;\n\n    constructor(enabled: Array<boolean>, fragments: Array<boolean>, vocabulary: Array<boolean>) {\n        this.enabled = enabled;\n        this.fragments = fragments;\n        this.vocabulary = vocabulary;\n    }\n}\n\nexport class LangModule {\n    name: string;\n    fragments: Array<Fragment>; // with weight\n    vocabulary: { [pattern: string]: Array<[string, string]> };\n    indices: Array<number>;\n\n    constructor(\n        name: string,\n        fragments: Array<Fragment>,\n        vocabulary: { [pattern: string]: Array<[string, string]> },\n        indices: Array<number>\n    )\n    {\n        this.name = name;\n        this.fragments = fragments;\n        this.vocabulary = vocabulary;\n        this.indices = indices;\n    }\n\n    static empty(): LangModule {\n        return new LangModule(\"Empty\", [], {}, []);\n    }\n\n    static unzip_fragments(\n        json_fragments: Array<[string, string, number?]>\n    ): [Array<Fragment>, Array<number>]\n    {\n        let fragments = [];\n        let weights = [];\n        for (let t of json_fragments) {\n            fragments.push(new Fragment(t[0], t[1]));\n            if (t[2]) {\n                weights.push(t[2]);\n            } else {\n                weights.push(1);\n            }\n        }\n        return [fragments, weights];\n    }\n\n    static from_json(json: any): LangModule {\n        let name = json.name;\n        unzip(json.fragments);\n        let [fragments, weights] = LangModule.unzip_fragments(json.fragments);\n        let vocabulary = json.vocabulary;\n        let indices = [];\n        weights.forEach((w, i) => {\n            [...Array(w).keys()].forEach(() => {\n                indices.push(i);\n            });\n        });\n        return new LangModule(name, fragments, vocabulary, indices);\n    }\n\n    static join(modules: Array<LangModule>, mask: LangModuleMask): LangModule {\n        let res = LangModule.empty();\n        modules.forEach((m, i) => {\n            if (mask.enabled[i]) {\n                if (mask.fragments[i]) {\n                    let shift = res.indices.length > 0 ? res.indices[res.indices.length - 1] : 0;\n                    res.fragments = res.fragments.concat(m.fragments);\n                    for (let j of m.indices) {\n                        res.indices.push(j + shift);\n                    }\n                }\n                if (mask.vocabulary[i]) {\n                    for (let [p, c] of Object.entries(m.vocabulary)) {\n                        if (p in res.vocabulary) {\n                            res.vocabulary[p] = res.vocabulary[p].concat(c);\n                        } else {\n                            res.vocabulary[p] = c;\n                        }\n                    }\n                }\n            }\n        });\n        return res;\n    }\n\n    random_with_vocabulary(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\n        if (this.fragments.length > 0) {\n            let i: number = random_element(this.indices);\n            let s: Fragment = this.fragments[i];\n            return s.populate(vocabulary);\n        } else {\n            return [\"...\", \"...\"];\n        }\n    }\n\n    random(): [string, string] {\n        return this.random_with_vocabulary(this.vocabulary);\n    }\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Badge,\n    OverlayTrigger, Tooltip, Popover, InputGroup, ListGroup, FormControl,\n    Container, Row, Col, Card, Accordion, Button, ButtonGroup, ToggleButton\n} from \"react-bootstrap\";\nimport { LangModule, LangModuleMask } from \"./LangModule\";\nimport \"./App.scss\";\n\n// Default source for language module data\nconst DEFAULT_SOURCE = \"https://raw.githubusercontent.com/nilsso/nilsso.github.io/code/static/apps/lang_modules/japanese_modules.json\";\n//const DEFAULT_SOURCE = \"https://raw.githubusercontent.com/nilsso/nilsso.github.io/code/static/apps/lang_modules/japanese_modules_test.json\";\n\n// Helper functions\nconst mask = (length: number, fill: boolean) => Array(length).fill(fill);\nconst toggle_mask = (mask: Array<boolean>, i: number, value: boolean) => {\n    let res = [...mask];\n    res[i] = value;\n    return res;\n};\n\n// Fetch (\"GET\" request) file from URL and parse a JSON\nasync function requestJSON(url: string) {\n    var module_data;\n    await fetch(url)\n        .then(response => response.json())\n        .then(data => module_data = data)\n        .catch(e => alert(\"Invalid source URL\\n\" + e));\n    if (module_data) {\n        return module_data;\n    } else {\n        return [];\n    }\n}\n\nfunction App() {\n    // Module source\n    const [source, setSource] = useState(DEFAULT_SOURCE);\n    // Modules\n    const [modules, setModules] = useState(Array<LangModule>(0));\n    // Joined module\n    const [joined, setJoined] = useState(LangModule.empty());\n    // Module masks\n    const [enabledMask, setEnabledMask] = useState(mask(0, false));\n    const [fragmentMask, setFragmentMask] = useState(mask(0, true));\n    const [vocabularyMask, setVocabularyMask] = useState(mask(0, true));\n\n    // If module source changed build new modules\n    useEffect(() => {\n        requestJSON(source).then(data => setModules(data.map(json => LangModule.from_json(json))));\n    }, [source]);\n\n    // If modules changed update the module masks\n    useEffect(() => {\n        setEnabledMask(mask(modules.length, false));\n        setFragmentMask(mask(modules.length, true));\n        setVocabularyMask(mask(modules.length, true));\n    }, [modules]);\n\n    // If module masks changed update the joined module\n    useEffect(() => {\n        if (modules.length > 0) {\n            setJoined(LangModule.join(modules, new LangModuleMask(enabledMask, fragmentMask, vocabularyMask)));\n        }\n    }, [modules, enabledMask, fragmentMask, vocabularyMask]);\n\n    return (\n        <Container>\n            <Row>\n                <GeneratorComponent joined={joined} enabledMask={enabledMask}/>\n                <ModulesComponent\n                    modules={modules}\n\n                    enabledMask={enabledMask}\n                    setEnabledMask={setEnabledMask}\n\n                    fragmentMask={fragmentMask}\n                    setFragmentMask={setFragmentMask}\n\n                    vocabularyMask={vocabularyMask}\n                    setVocabularyMask={setVocabularyMask}\n                />\n            </Row>\n            <Source source={source} setSource={setSource}/>\n        </Container>\n    );\n}\n\nfunction Source(props: any) {\n    const [source, setSource] = [props.source, props.setSource];\n\n    const [value, setValue] = useState(source);\n\n    return (\n        <Row>\n            <Col className=\"component\">\n                <InputGroup>\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>\n                            Module Source\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        defaultValue={value}\n                        onChange={e => setValue(e.target.value)}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"outline-secondary\"\n                            onClick={() => setSource(value)}\n                        >\n                            Load\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Row>\n    );\n}\n\nfunction GeneratorComponent(props: any) {\n    const joined = props.joined;\n\n    const enabledMask = props.enabledMask;\n\n    const [generated, setGenerated] = useState(\"...\");\n    const [meaning, setMeaning] = useState(\"\");\n    const [hidden, setHidden] = useState(\"...\");\n    const [swap, setSwap] = useState(false);\n\n    const some_enabled = () => enabledMask.some(e => e);\n\n    const help = (\n        <Popover\n            id=\"help-popover\"\n        >\n            <Popover.Title as=\"h3\">Language Fragment Generator</Popover.Title>\n            <Popover.Content>\n                <p>\n                    Language modules are like individual lessons of a language class, where each module contains a list of <strong>fragments</strong> and <strong>vocabulary</strong>. Under the card title <strong>Modules</strong> is the list of available language modules, each with an <Badge variant=\"primary\">Enable</Badge> button to enable the module, a <Badge variant=\"secondary\">Fragments</Badge> button to enable the fragments of that module, and a <Badge variant=\"secondary\">Vocabulary</Badge> button to enable the vocabulary of that module. The <Badge variant=\"primary\">All</Badge> button will enable all of the modules, and the <Badge variant=\"danger\">None</Badge> button will disable them all.\n                </p>\n                <p>\n                    Fragments can be entire sentences, or can contain <strong>placeholders</strong> that will be substituted upon generation. For example, a fragment containing the <code>{\"{{noun}}\"}</code> placeholder would have a random noun inserted where the placeholder is.\n                </p>\n                <p>\n                    With one or more modules <strong>enabled</strong>, clicking the <Badge variant=\"primary\">Generate</Badge> button generates a <strong>populated</strong> fragment by first randomly selecting a fragment from any of the modules with fragments enabled, and then populating the fragment with randomly selected vocabulary from any of the language modules with vocabulary enabled.\n                </p>\n                <p>\n                    Clicking the <Badge variant=\"success\">Reveal</Badge> button will show the meaning of what was generated, and toggling on the <Badge variant=\"secondary\">Swap</Badge> button will instead first display the meaning so that revealing will show the populated fragment second.\n                </p>\n            </Popover.Content>\n        </Popover>\n    );\n\n    const disabled = (\n        <Tooltip\n            id=\"generator-buttons-tooltip\"\n            className=\"tooltip-danger\"\n        >\n            Enable at least one module\n        </Tooltip>\n    );\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>\n                    <span>Generator</span>\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={help}>\n                        <Button variant=\"info\">Help</Button>\n                    </OverlayTrigger>\n                </Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <h4>{generated}</h4>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <h4>{hidden}</h4>\n                    </ListGroup.Item>\n                    <OverlayTrigger\n                        placement=\"top\"\n                        show={!some_enabled()}\n                        overlay={disabled}\n                    >\n                        <ButtonGroup id=\"generator-buttons\">\n                            <Button\n                                disabled={!some_enabled()}\n                                onClick={() => {\n                                    let [generated, meaning] = joined.random();\n                                    if (generated) {\n                                        [generated, meaning] = swap ? [meaning, generated] : [generated, meaning];\n                                        setHidden(\"...\");\n                                        setGenerated(generated);\n                                        setMeaning(meaning);\n                                    }\n                                }\n                                }\n                            >\n                                Generate\n                            </Button>\n                            <Button\n                                variant=\"success\"\n                                disabled={!some_enabled()}\n                                onClick={() => setHidden(meaning)}\n                            >\n                                Reveal\n                            </Button>\n                            <Button\n                                active={swap}\n                                variant=\"outline-secondary\"\n                                disabled={!some_enabled()}\n                                onClick={() => setSwap(!swap)}\n                            >\n                                Swap\n                            </Button>\n                        </ButtonGroup>\n                    </OverlayTrigger>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n\nfunction ModulesComponent(props: any) {\n    // Modules state\n    const modules = props.modules;\n    // Mask states\n    const [enabledMask, setEnabledMask] = [props.enabledMask, props.setEnabledMask];\n    const [fragmentMask, setFragmentMask] = [props.fragmentMask, props.setFragmentMask];\n    const [vocabularyMask, setVocabularyMask] = [props.vocabularyMask, props.setVocabularyMask];\n\n    // Helper to toggle all modules\n    const toggleAll = function(checked: boolean) {\n        setEnabledMask(mask(modules.length, checked));\n    }\n\n    let module_components = modules.map((lang_module: LangModule, i: number) => {\n        return <LangModuleComponent\n            key={i}\n            lang_module={lang_module}\n\n            enabledFlag={enabledMask[i]}\n            fragmentFlag={fragmentMask[i]}\n            vocabularyFlag={vocabularyMask[i]}\n\n            setEnabledFlag={(checked: boolean) => setEnabledMask(toggle_mask(enabledMask, i, checked))}\n            setFragmentFlag={(checked: boolean) => setFragmentMask(toggle_mask(fragmentMask, i, checked))}\n            setVocabularyFlag={(checked: boolean) => setVocabularyMask(toggle_mask(vocabularyMask, i, checked))}\n        />;\n    });\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>\n                    <span>Modules</span>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => toggleAll(true)}\n                    >\n                        All\n                    </Button>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => toggleAll(false)}\n                    >\n                        None\n                    </Button>\n                </Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <div id=\"module-list\">{module_components}</div>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n\nfunction LangModuleComponent(props: any) {\n    // Modules state\n    const lang_module = props.lang_module;\n    // Mask states\n    const [enabledFlag, setEnabledFlag] = [props.enabledFlag, props.setEnabledFlag];\n    const [fragmentFlag, setFragmentFlag] = [props.fragmentFlag, props.setFragmentFlag];\n    const [vocabularyFlag, setVocabularyFlag] = [props.vocabularyFlag, props.setVocabularyFlag];\n\n    const has_fragments = !!fragmentFlag;\n    const has_vocabulary = !!vocabularyFlag;\n\n    return(\n        <Accordion className=\"module\">\n            <Card>\n                <Card.Header>\n                    {lang_module.name}\n                </Card.Header>\n                <Card.Body id=\"module-control\">\n                    <ButtonGroup\n                        toggle className=\"module-controls\"\n                    >\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            value={0}\n                            checked={enabledFlag}\n                            onChange={(e) => setEnabledFlag(e.currentTarget.checked)}\n                        >\n                            Enable\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            size=\"sm\"\n                            value={1}\n                            checked={fragmentFlag}\n                            disabled={has_fragments && !enabledFlag}\n                            onChange={(e) => setFragmentFlag(e.currentTarget.checked)}\n                        >\n                            Fragments\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            size=\"sm\"\n                            value={2}\n                            checked={vocabularyFlag}\n                            disabled={has_vocabulary && !enabledFlag}\n                            onChange={(e) => setVocabularyFlag(e.currentTarget.checked)}\n                        >\n                            Vocabulary\n                        </ToggleButton>\n                    </ButtonGroup>\n                </Card.Body>\n            </Card>\n            <Card>\n                <FragmentListComponent lang_module={lang_module} />\n                <VocabularyListComponent lang_module={lang_module} />\n            </Card>\n        </Accordion>\n    );\n}\n\nfunction FragmentListComponent(props: any) {\n    const lang_module = props.lang_module;\n\n    const rows = lang_module.fragments.map((s, i) => {\n        return (\n            <Row key={i}>\n                <Col>{s.fragment_template}</Col>\n                <Col>{s.meaning_template}</Col>\n            </Row>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <Accordion.Toggle\n                as={Card.Header}\n                className=\"small content-header\"\n                variant=\"link\"\n                eventKey=\"0\"\n            >\n                View Fragments\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                    <Card className=\"content\">\n                        <Container fluid>\n                            {rows}\n                        </Container>\n                    </Card>\n                </Card.Body>\n            </Accordion.Collapse>\n        </React.Fragment>\n    );\n}\n\nfunction VocabularyListComponent(props: any) {\n    const lang_module = props.lang_module;\n\n    const token_rows = function(choices) {\n        return choices.map(([vocab, meaning], i) => {\n            return (\n                <Row key={i}>\n                    <Col>{vocab}</Col>\n                    <Col>{meaning}</Col>\n                </Row>\n            );\n        });\n    }\n\n    const vocabulary_rows = Object.entries(lang_module.vocabulary).map(([token, choices], i) => {\n        return (\n            <React.Fragment key={i}>\n                <ListGroup.Item variant=\"secondary\" className=\"vocabulary-header\">{token}</ListGroup.Item>\n                <ListGroup.Item>\n                    <Container>\n                        {token_rows(choices)}\n                    </Container>\n                </ListGroup.Item>\n            </React.Fragment>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <Accordion.Toggle\n                as={Card.Header}\n                className=\"small content-header\"\n                variant=\"link\"\n                eventKey=\"1\"\n            >\n                View Vocabulary\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n                <Card.Body>\n                    <Card className=\"content\">\n                        <ListGroup variant=\"flush\">\n                            {vocabulary_rows}\n                        </ListGroup>\n                    </Card>\n                </Card.Body>\n            </Accordion.Collapse>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}