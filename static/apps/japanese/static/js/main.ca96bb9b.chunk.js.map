{"version":3,"sources":["util.ts","lang_module.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["random_index","arr","console","assert","length","Math","floor","random","remove_random","i","splice","pop","clone_reg_exp","input","injectFlags","pattern","source","flags","global","test","ignoreCase","multiline","RegExp","Sentence","template","this","vocabulary","res","slice","Object","entries","p","choices","indices","Array","from","keys","matchAll","next","done","replace","LangModuleMask","enabled","sentences","LangModule","name","populate","random_with_vocabulary","json","map","s","modules","mask","forEach","m","concat","c","fill","toggle_mask","value","url","a","fetch","mode","credentials","response","data","Main","props","useState","empty","joined","setJoined","setEnabled","setSentences","setVocabulary","useEffect","join","Container","className","Row","id","Generator","ModulesComponent","generated","setGenerated","Col","Card","Header","Button","onClick","Body","module_components","lm","ModuleComponent","key","checked","toggleAll","variant","Accordion","ButtonGroup","toggle","ToggleButton","type","onChange","e","currentTarget","disabled","Toggle","as","eventKey","Collapse","App","setModules","getModuleData","then","from_json","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca96bb9b.chunk.js","sourcesContent":["export function random_index<T>(arr: Array<T>): number {\n    console.assert(arr.length > 0);\n    return Math.floor(Math.random() * arr.length);\n}\n\nexport function random_element<T>(arr: Array<T>): T {\n    return arr[random_index(arr)];\n}\n\nexport function remove_random<T>(arr: Array<T>): T | undefined {\n    let i = random_index(arr);\n    return arr.splice(i, 1).pop();\n}\n\nexport function clone_reg_exp(input: RegExp, injectFlags: string) {\n    let pattern = input.source;\n    let flags = \"\";\n    injectFlags = (injectFlags || \"\");\n\n    if (input.global || ( /g/i ).test(injectFlags) ) { flags += \"g\"; }\n    if (input.ignoreCase || ( /i/i ).test(injectFlags) ) { flags += \"i\"; }\n    if (input.multiline || ( /m/i ).test(injectFlags) ) { flags += \"m\"; }\n\n    return(new RegExp(pattern, flags));\n}\n\n\n","import { random_element, remove_random, clone_reg_exp } from \"./util\";\n\nexport class Sentence {\n    template: string;\n\n    constructor(template: string) {\n        this.template = template;\n    }\n\n    populate(vocabulary: { [pattern: string]: Array<string> }): string {\n        let res = this.template.slice();\n        for (let [p, choices] of Object.entries(vocabulary)) {\n            let pattern = new RegExp(p);\n            let indices = Array.from(Array(choices.length).keys());\n            for (let i = this.template.matchAll(clone_reg_exp(pattern, \"g\")); !i.next().done;) {\n                let i = remove_random(indices) as number;\n                res = res.replace(pattern, choices[i]);\n            }\n        }\n        return res;\n    }\n}\n\nexport class LangModuleMask {\n    enabled: Array<boolean>;\n    sentences: Array<boolean>;\n    vocabulary: Array<boolean>;\n\n    constructor(enabled: Array<boolean>, sentences: Array<boolean>, vocabulary: Array<boolean>) {\n        this.enabled = enabled;\n        this.sentences = sentences;\n        this.vocabulary = vocabulary;\n    }\n}\n\nexport class LangModule {\n    name: string;\n    sentences: Array<Sentence>;\n    vocabulary: { [pattern: string]: Array<string> };\n\n    constructor(name: string, sentences: Array<Sentence>, vocabulary: { [pattern: string]: Array<string> }) {\n        this.name = name;\n        this.sentences = sentences;\n        this.vocabulary = vocabulary;\n    }\n\n    static empty(): LangModule {\n        return new LangModule(\"Empty\", [], {});\n    }\n\n    static from_json(json: any): LangModule {\n        let name = json.name;\n        let sentences = json.sentences.map(s => new Sentence(s));\n        let vocabulary = json.vocabulary;\n        return new LangModule(name, sentences, vocabulary);\n    }\n\n    static join(modules: Array<LangModule>, mask: LangModuleMask): LangModule {\n        let res = new LangModule(\"Joined\", [], {});\n        modules.forEach((m, i) => {\n            if (mask.enabled[i]) {\n                if (mask.sentences[i]) {\n                    res.sentences = res.sentences.concat(m.sentences);\n                }\n                if (mask.vocabulary[i]) {\n                    for (let [p, c] of Object.entries(m.vocabulary)) {\n                        if (p in res.vocabulary) {\n                            res.vocabulary[p] = res.vocabulary[p].concat(c);\n                        } else {\n                            res.vocabulary[p] = c;\n                        }\n                    }\n                }\n            }\n        });\n\n        return res;\n    }\n\n    random_with_vocabulary(vocabulary: { [pattern: string]: Array<string> }): string {\n        if (this.sentences.length > 0) {\n            let s: Sentence = random_element(this.sentences);\n            return s.populate(vocabulary);\n        } else {\n            return \"\";\n        }\n    }\n\n    random() {\n        return this.random_with_vocabulary(this.vocabulary);\n    }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Accordion, Button, ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { LangModule, LangModuleMask } from \"./lang_module\";\n\nimport \"./App.scss\";\n\n// Source for language module data\nconst GIST = \"https://gist.github.com/nilsso/bdf52edd7e207b9fb3ccdb74fd774973/raw/\";\n\n// Helper functions\nconst mask = (length: number, fill: boolean) => Array(length).fill(fill);\nconst toggle_mask = (mask: Array<boolean>, i: number, value: boolean) => {\n    let res = [...mask];\n    res[i] = value;\n    return res;\n};\n\n// Request language module data\nasync function getModuleData(url: string) {\n    let response = await fetch(url, {\n        mode: \"cors\",\n        credentials: \"include\"\n    });\n    let data = await response.json();\n    return data\n}\n\nfunction App() {\n    const [modules, setModules] = useState(Array<LangModule>(0));\n\n    // Request language module data and set modules when ready\n    useEffect(() => {\n        getModuleData(GIST).then(data => setModules(data.map(json => LangModule.from_json(json))));\n    }, []);\n\n    // When modules are ready\n    useEffect(() => {\n        if (modules.length > 0) {\n            console.log(modules);\n        }\n    }, [modules]);\n\n    return (\n        <div className=\"App h-100\">\n            <Main modules={modules}/>\n        </div>\n    );\n}\n\nfunction Main(props: any) {\n    let modules = props.modules;\n\n    let [joined, setJoined] = useState(LangModule.empty());\n    let [enabled, setEnabled] = useState(mask(0, false));\n    let [sentences, setSentences] = useState(mask(0, true));\n    let [vocabulary, setVocabulary] = useState(mask(0, true));\n\n    // When modules are ready\n    useEffect(() => {\n        setEnabled(mask(modules.length, false));\n        setSentences(mask(modules.length, true));\n        setVocabulary(mask(modules.length, true));\n    }, [modules]);\n\n    // Update joined language module when any control changes\n    useEffect(() => {\n        if (modules.length > 0) {\n            setJoined(LangModule.join(modules, new LangModuleMask(enabled, sentences, vocabulary)));\n        }\n    }, [modules, enabled, sentences, vocabulary]);\n\n    return (\n        <Container className=\"h-100\">\n            <Row id=\"components\" className=\"h-100\">\n                <Generator joined={joined}/>\n                <ModulesComponent\n                    modules={modules}\n\n                    enabled={enabled}\n                    sentences={sentences}\n                    vocabulary={vocabulary}\n\n                    setEnabled={setEnabled}\n                    setSentences={setSentences}\n                    setVocabulary={setVocabulary}\n                />\n            </Row>\n        </Container>\n    );\n}\n\nfunction Generator(props: any) {\n    const joined = props.joined;\n\n    const [generated, setGenerated] = useState(\"...\");\n\n    function generate() {\n        setGenerated(joined.random());\n    }\n\n    return (\n        <Col className=\"generator\">\n            <Card>\n                <Card.Header>\n                    <span className=\"header-text\">Generator</span>\n                    <Button\n                        onClick={generate}\n                    >\n                        Generate\n                    </Button>\n                </Card.Header>\n                <Card.Body>\n                    <h1>{generated}</h1>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n}\n\nfunction ModulesComponent(props: any) {\n    const modules = props.modules;\n\n    const enabled = props.enabled;\n    const sentences = props.sentences;\n    const vocabulary = props.vocabulary;\n\n    const setEnabled = props.setEnabled;\n    const setSentences = props.setSentences;\n    const setVocabulary = props.setVocabulary;\n\n    //const async function buildModules(modules: any) {\n    //}\n\n    let module_components = modules.map((lm: LangModule, i: number) => {\n        return <ModuleComponent\n            key={i}\n            name={lm.name}\n\n            enabled={enabled[i]}\n            sentences={sentences[i]}\n            vocabulary={vocabulary[i]}\n\n            setEnabled={(checked: boolean) => setEnabled(toggle_mask(enabled, i, checked))}\n            setSentences={(checked: boolean) => setSentences(toggle_mask(sentences, i, checked))}\n            setVocabulary={(checked: boolean) => setVocabulary(toggle_mask(vocabulary, i, checked))}\n        />;\n    });\n\n    const toggleAll = function(checked: boolean) {\n        setEnabled(mask(modules.length, checked));\n    }\n\n    return (\n        <Col className=\"h-100\">\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <span className=\"header-text\">Modules</span>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => toggleAll(true)}\n                    >\n                        Enable All\n                    </Button>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => toggleAll(false)}\n                    >\n                        Enable None\n                    </Button>\n                </Card.Header>\n                <Card.Body className=\"h-100\">\n                    <div id=\"module-list\">{module_components}</div>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n}\n\nfunction ModuleComponent(props: any) {\n    const enabled = props.enabled;\n    const sentences = props.sentences;\n    const vocabulary = props.vocabulary;\n\n    const setEnabled = props.setEnabled;\n    const setSentences = props.setSentences;\n    const setVocabulary = props.setVocabulary;\n\n    return(\n        <Accordion className=\"module\">\n            <Card>\n                <Card.Body id=\"module-control\">\n                    <ButtonGroup\n                        toggle className=\"module-controls\"\n                    >\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            value={0}\n                            checked={enabled}\n                            onChange={(e) => setEnabled(e.currentTarget.checked)}\n                        >\n                            {props.name}\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            value={1}\n                            checked={sentences}\n                            disabled={!enabled}\n                            onChange={(e) => setSentences(e.currentTarget.checked)}\n                        >\n                            Sentences\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            value={2}\n                            checked={vocabulary}\n                            disabled={!enabled}\n                            onChange={(e) => setVocabulary(e.currentTarget.checked)}\n                        >\n                            Vocabulary\n                        </ToggleButton>\n                    </ButtonGroup>\n                </Card.Body>\n            </Card>\n            <Card>\n                <Accordion.Toggle\n                    as={Card.Header}\n                    className=\"module-contents-header small\"\n                    variant=\"link\"\n                    eventKey=\"0\"\n                >\n                    Contents\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>\n                        Sentences, Vocabulary\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </Accordion>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}