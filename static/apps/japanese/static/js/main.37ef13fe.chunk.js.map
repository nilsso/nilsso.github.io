{"version":3,"sources":["util.ts","LangModule.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["random_index","arr","console","assert","length","Math","floor","random","random_element","Sentence","sentence_template","meaning_template","this","vocabulary","sentence","slice","meaning","token_pattern","i","replace","token","vocab","vocab_meaning","p","RegExp","search","LangModuleMask","enabled","sentences","LangModule","name","populate","random_with_vocabulary","json","map","t","m","modules","mask","res","forEach","concat","Object","entries","c","fill","Array","toggle_mask","value","url","a","fetch","then","response","data","module_data","catch","e","alert","Source","props","source","setSource","useState","setValue","Row","Col","className","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","target","Append","Button","variant","onClick","Generator","joined","generated","setGenerated","setMeaning","hidden","setHidden","swap","setSwap","Card","Header","ListGroup","Item","ButtonGroup","active","ModulesComponent","setEnabled","setSentences","setVocabulary","toggleAll","checked","module_components","lang_module","ModuleComponent","key","id","sentence_rows","s","vocabulary_rows","Container","v","choices","Accordion","Body","toggle","ToggleButton","type","size","currentTarget","disabled","Fragment","Toggle","as","eventKey","Collapse","fluid","App","setModules","empty","setJoined","useEffect","requestJSON","from_json","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.37ef13fe.chunk.js","sourcesContent":["export function random_index<T>(arr: Array<T>): number {\n    console.assert(arr.length > 0);\n    return Math.floor(Math.random() * arr.length);\n}\n\nexport function random_element<T>(arr: Array<T>): T {\n    return arr[random_index(arr)];\n}\n\nexport function remove_random<T>(arr: Array<T>): T | undefined {\n    let i = random_index(arr);\n    return arr.splice(i, 1).pop();\n}\n\nexport function clone_reg_exp(input: RegExp, injectFlags: string) {\n    let pattern = input.source;\n    let flags = \"\";\n    injectFlags = (injectFlags || \"\");\n\n    if (input.global || ( /g/i ).test(injectFlags) ) { flags += \"g\"; }\n    if (input.ignoreCase || ( /i/i ).test(injectFlags) ) { flags += \"i\"; }\n    if (input.multiline || ( /m/i ).test(injectFlags) ) { flags += \"m\"; }\n\n    return(new RegExp(pattern, flags));\n}\n\n\n","import { random_element, remove_random, clone_reg_exp } from \"./util\";\n\nexport class Sentence {\n    sentence_template: string;\n    meaning_template: string;\n\n    constructor(sentence_template: string, meaning_template: string) {\n        this.sentence_template = sentence_template;\n        this.meaning_template = meaning_template;\n    }\n\n    populate(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\n        let sentence = this.sentence_template.slice();\n        let meaning = this.meaning_template.slice();\n        let token_pattern = /{{(.+)}}/;\n\n        for (let i = 1; sentence.search(token_pattern) >= 0; i++) {\n            sentence = sentence.replace(token_pattern, (token) => {\n                if (token in vocabulary && vocabulary[token].length > 0) {\n                    let [vocab, vocab_meaning] = random_element(vocabulary[token]);\n                    //let p = /\\{\\{1}}/;\n                    let p = new RegExp(\"\\\\{\\\\{\" + i + \"}}\", \"g\");\n                    //console.log(vocab, meaning, p, meaning.search(p));\n                    meaning = meaning.replace(p, vocab_meaning);\n                    return vocab;\n                } else {\n                    return token;\n                }\n            });\n        }\n\n        //for (let [p, choices] of Object.entries(vocabulary)) {\n            //let pattern = new RegExp(p);\n            //let indices = Array.from(Array(choices.length).keys());\n            //for (let i = this.template.matchAll(clone_reg_exp(pattern, \"g\")); !i.next().done;) {\n                //let i = remove_random(indices) as number;\n                //res = res.replace(pattern, choices[i]);\n            //}\n        //}\n        return [sentence, meaning];\n    }\n}\n\nexport class LangModuleMask {\n    enabled: Array<boolean>;\n    sentences: Array<boolean>;\n    vocabulary: Array<boolean>;\n\n    constructor(enabled: Array<boolean>, sentences: Array<boolean>, vocabulary: Array<boolean>) {\n        this.enabled = enabled;\n        this.sentences = sentences;\n        this.vocabulary = vocabulary;\n    }\n}\n\nexport class LangModule {\n    name: string;\n    sentences: Array<Sentence>;\n    vocabulary: { [pattern: string]: Array<[string, string]> };\n\n    constructor(\n        name: string,\n        sentences: Array<Sentence>,\n        vocabulary: { [pattern: string]: Array<[string, string]> }\n    )\n    {\n        this.name = name;\n        this.sentences = sentences;\n        this.vocabulary = vocabulary;\n    }\n\n    static empty(): LangModule {\n        return new LangModule(\"Empty\", [], {});\n    }\n\n    static from_json(json: any): LangModule {\n        let name = json.name;\n        let sentences = json.sentences.map(([t, m]) => new Sentence(t, m));\n        let vocabulary = json.vocabulary;\n        return new LangModule(name, sentences, vocabulary);\n    }\n\n    static join(modules: Array<LangModule>, mask: LangModuleMask): LangModule {\n        let res = new LangModule(\"Joined\", [], {});\n        modules.forEach((m, i) => {\n            if (mask.enabled[i]) {\n                if (mask.sentences[i]) {\n                    res.sentences = res.sentences.concat(m.sentences);\n                }\n                if (mask.vocabulary[i]) {\n                    for (let [p, c] of Object.entries(m.vocabulary)) {\n                        if (p in res.vocabulary) {\n                            res.vocabulary[p] = res.vocabulary[p].concat(c);\n                        } else {\n                            res.vocabulary[p] = c;\n                        }\n                    }\n                }\n            }\n        });\n\n        return res;\n    }\n\n    random_with_vocabulary(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\n        if (this.sentences.length > 0) {\n            let s: Sentence = random_element(this.sentences);\n            //return [s.sentence_template, s.meaning_template];\n            return s.populate(vocabulary);\n        } else {\n            return [\"\", \"\"];\n        }\n    }\n\n    random(): [string, string] {\n        return this.random_with_vocabulary(this.vocabulary);\n    }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { InputGroup, ListGroup, FormControl, Container, Row, Col, Card, Accordion, Button, ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { LangModule, LangModuleMask } from \"./LangModule\";\nimport \"./App.scss\";\n\n// Default source for language module data\nconst DEFAULT_SOURCE = \"https://raw.githubusercontent.com/nilsso/nilsso.github.io/code/static/apps/lang_modules/japanese_modules.json\";\n\n// Helper functions\nconst mask = (length: number, fill: boolean) => Array(length).fill(fill);\nconst toggle_mask = (mask: Array<boolean>, i: number, value: boolean) => {\n    let res = [...mask];\n    res[i] = value;\n    return res;\n};\n\n// Fetch (\"GET\" request) file from URL and parse a JSON\nasync function requestJSON(url: string) {\n    var module_data;\n    await fetch(url)\n        .then(response => response.json())\n        .then(data => module_data = data)\n        .catch(e => alert(\"Invalid source URL\\n\" + e));\n    if (module_data) {\n        return module_data;\n    } else {\n        return [];\n    }\n}\n\nfunction App() {\n    // Module source\n    const [source, setSource] = useState(DEFAULT_SOURCE);\n    // Modules\n    const [modules, setModules] = useState(Array<LangModule>(0));\n    // Joined module\n    const [joined, setJoined] = useState(LangModule.empty());\n    // Module masks\n    const [enabled, setEnabled] = useState(mask(0, false));\n    const [sentences, setSentences] = useState(mask(0, true));\n    const [vocabulary, setVocabulary] = useState(mask(0, true));\n\n    // If module source changed build new modules\n    useEffect(() => {\n        requestJSON(source).then(data => setModules(data.map(json => LangModule.from_json(json))));\n    }, [source]);\n\n    // If modules changed update the module masks\n    useEffect(() => {\n        setEnabled(mask(modules.length, false));\n        setSentences(mask(modules.length, true));\n        setVocabulary(mask(modules.length, true));\n    }, [modules]);\n\n    // If module masks changed update the joined module\n    useEffect(() => {\n        if (modules.length > 0) {\n            setJoined(LangModule.join(modules, new LangModuleMask(enabled, sentences, vocabulary)));\n        }\n    }, [modules, enabled, sentences, vocabulary]);\n\n    return (\n        <Container>\n            <Row>\n                <Generator joined={joined}/>\n                <ModulesComponent\n                    modules={modules}\n\n                    enabled={enabled}\n                    sentences={sentences}\n                    vocabulary={vocabulary}\n\n                    setEnabled={setEnabled}\n                    setSentences={setSentences}\n                    setVocabulary={setVocabulary}\n                />\n            </Row>\n            <Source source={source} setSource={setSource}/>\n        </Container>\n    );\n}\n\nfunction Source(props: any) {\n    const [source, setSource] = [props.source, props.setSource];\n\n    const [value, setValue] = useState(source);\n\n    return (\n        <Row>\n            <Col className=\"component\">\n                <InputGroup>\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>\n                            Module Source\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        defaultValue={value}\n                        onChange={e => setValue(e.target.value)}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"outline-secondary\"\n                            onClick={() => setSource(value)}\n                        >\n                            Load\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Row>\n    );\n}\n\nfunction Generator(props: any) {\n    const joined = props.joined;\n\n    // Generated sentence or expresson\n    const [generated, setGenerated] = useState(\"...\");\n    const [meaning, setMeaning] = useState(\"\");\n    const [hidden, setHidden] = useState(\"...\");\n    const [swap, setSwap] = useState(false);\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>Generator</Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <ButtonGroup>\n                            <Button\n                                onClick={() => {\n                                    let [generated, meaning] = joined.random();\n                                    if (generated) {\n                                        [generated, meaning] = swap ? [meaning, generated] : [generated, meaning];\n                                        setHidden(\"...\");\n                                        setGenerated(generated);\n                                        setMeaning(meaning);\n                                    }\n                                }\n                                }\n                            >\n                                Generate\n                            </Button>\n                            <Button\n                                variant=\"success\"\n                                onClick={() => setHidden(meaning)}\n                            >\n                                Reveal\n                            </Button>\n                            <Button\n                                active={swap}\n                                variant=\"outline-secondary\"\n                                onClick={() => setSwap(!swap)}\n                            >\n                                Swap\n                            </Button>\n                        </ButtonGroup>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <p>{generated}</p>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <p>{hidden}</p>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n\nfunction ModulesComponent(props: any) {\n    // Modules state\n    const modules = props.modules;\n    // Mask states\n    const [enabled, setEnabled] = [props.enabled, props.setEnabled];\n    const [sentences, setSentences] = [props.sentences, props.setSentences];\n    const [vocabulary, setVocabulary] = [props.vocabulary, props.setVocabulary];\n\n    // Helper to toggle all modules\n    const toggleAll = function(checked: boolean) {\n        setEnabled(mask(modules.length, checked));\n    }\n\n    let module_components = modules.map((lang_module: LangModule, i: number) => {\n        return <ModuleComponent\n            key={i}\n            lang_module={lang_module}\n\n            enabled={enabled[i]}\n            sentences={sentences[i]}\n            vocabulary={vocabulary[i]}\n\n            setEnabled={(checked: boolean) => setEnabled(toggle_mask(enabled, i, checked))}\n            setSentences={(checked: boolean) => setSentences(toggle_mask(sentences, i, checked))}\n            setVocabulary={(checked: boolean) => setVocabulary(toggle_mask(vocabulary, i, checked))}\n        />;\n    });\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>Modules</Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <ButtonGroup>\n                            <Button\n                                variant=\"primary\"\n                                onClick={() => toggleAll(true)}\n                            >\n                                All\n                            </Button>\n                            <Button\n                                variant=\"danger\"\n                                onClick={() => toggleAll(false)}\n                            >\n                                None\n                            </Button>\n                        </ButtonGroup>\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <div id=\"module-list\">{module_components}</div>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n\nfunction ModuleComponent(props: any) {\n    // Modules state\n    const lang_module = props.lang_module;\n    // Mask states\n    const [enabled, setEnabled] = [props.enabled, props.setEnabled];\n    const [sentences, setSentences] = [props.sentences, props.setSentences];\n    const [vocabulary, setVocabulary] = [props.vocabulary, props.setVocabulary];\n\n    const sentence_rows = lang_module.sentences.map((s, i) => {\n        return (\n            <Row key={i} className=\"module-content-item\">\n                <Col>{s.sentence_template}</Col>\n                <Col>{s.meaning_template}</Col>\n            </Row>\n        );\n    });\n\n    const choices = function(c) {\n        return c.map(([v, m], i) => {\n            return (\n                <Row key={i} className=\"module-content-item\">\n                    <Col>{v}</Col>\n                    <Col>{m}</Col>\n                </Row>\n            );\n        });\n    }\n\n    const vocabulary_rows = Object.entries(lang_module.vocabulary).map(([t, c], i) => {\n        return (\n            <div>\n            <ListGroup.Item variant=\"secondary\">{t}</ListGroup.Item>\n            <ListGroup.Item className=\"vocabulary\">\n                <Container>\n                    {choices(c)}\n                </Container>\n            </ListGroup.Item>\n        </div>\n        );\n    });\n\n    return(\n        <Accordion className=\"module\">\n            <Card>\n                <Card.Body id=\"module-control\">\n                    <ButtonGroup\n                        toggle className=\"module-controls\"\n                    >\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            value={0}\n                            checked={enabled}\n                            onChange={(e) => setEnabled(e.currentTarget.checked)}\n                        >\n                            {lang_module.name}\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            size=\"sm\"\n                            value={1}\n                            checked={sentences}\n                            disabled={!enabled}\n                            onChange={(e) => setSentences(e.currentTarget.checked)}\n                        >\n                            Sentences\n                        </ToggleButton>\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-secondary\"\n                            size=\"sm\"\n                            value={2}\n                            checked={vocabulary}\n                            disabled={!enabled}\n                            onChange={(e) => setVocabulary(e.currentTarget.checked)}\n                        >\n                            Vocabulary\n                        </ToggleButton>\n                    </ButtonGroup>\n                </Card.Body>\n            </Card>\n            <Card>\n                { sentence_rows.length > 0 &&\n                    <React.Fragment>\n                        <Accordion.Toggle\n                            as={Card.Header}\n                            className=\"small module-contents-header\"\n                            variant=\"link\"\n                            eventKey=\"0\"\n                        >\n                            View Sentences and Expressions\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Card className=\"module-content\">\n                                    <Container fluid>\n                                        {sentence_rows}\n                                    </Container>\n                                </Card>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </React.Fragment>\n                }\n                { vocabulary_rows.length > 0 &&\n                    <React.Fragment>\n                        <Accordion.Toggle\n                            as={Card.Header}\n                            className=\"small module-contents-header\"\n                            variant=\"link\"\n                            eventKey=\"1\"\n                        >\n                            View Vocabulary\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <Card className=\"module-content\">\n                                    <ListGroup variant=\"flush\">\n                                        {vocabulary_rows}\n                                    </ListGroup>\n                                </Card>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </React.Fragment>\n                }\n            </Card>\n        </Accordion>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}