{"version":3,"sources":["util.ts","LangModule.ts","components/Source.tsx","components/Generator.tsx","components/FragmentList.tsx","components/VocabularyList.tsx","components/LangModule.tsx","components/Modules.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["random_index","arr","console","assert","length","Math","floor","random","random_element","mask","fill","Array","toggle_mask","i","value","res","Fragment","fragment_template","meaning_template","this","vocabulary","fragment","slice","meaning","matchAll","m","token","vocab","vocab_meaning","replace","RegExp","charAt","toUpperCase","LangModuleMask","enabled","fragments","LangModule","name","indices","populate","random_with_vocabulary","json_fragments","weights","t","push","json","a","b","u","v","unzip","unzip_fragments","forEach","w","keys","modules","empty","shift","concat","j","Object","entries","p","c","SourceComponent","props","source","setSource","useState","setValue","Row","Col","className","InputGroup","Prepend","Text","FormControl","defaultValue","onChange","e","target","Append","Button","variant","onClick","GeneratorComponent","joined","enabledMask","generated","setGenerated","setMeaning","hidden","setHidden","swap","setSwap","some_enabled","some","help","Popover","id","Title","as","Content","Badge","disabled","Tooltip","onClickHandler","Card","Header","OverlayTrigger","trigger","placement","overlay","ListGroup","Item","show","ButtonGroup","onKeyPress","active","FragmentListComponent","rows","lang_module","map","f","key","Accordion","Toggle","eventKey","Collapse","Body","Container","fluid","VocabularyListComponent","vocabulary_rows","choices","token_rows","LangModuleComponent","enabledFlag","setEnabledFlag","fragmentFlag","setFragmentFlag","vocabFlag","setVocabFlag","has_fragments","has_vocabulary","toggle","ToggleButton","type","size","checked","currentTarget","ModulesComponent","setEnabledMask","fragmentMask","setFragmentMask","vocabMask","setVocabMask","toggleAll","module_components","url","fetch","then","response","data","module_data","catch","alert","App","setModules","setJoined","useEffect","requestJSON","from_json","join","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0bc85e31.chunk.js","sourcesContent":["export function random_index<T>(arr: Array<T>): number {\n    console.assert(arr.length > 0);\n    return Math.floor(Math.random() * arr.length);\n}\n\nexport function random_element<T>(arr: Array<T>): T {\n    return arr[random_index(arr)];\n}\n\nexport function remove_random<T>(arr: Array<T>): T | undefined {\n    let i = random_index(arr);\n    return arr.splice(i, 1).pop();\n}\n\nexport function clone_reg_exp(input: RegExp, injectFlags: string) {\n    let pattern = input.source;\n    let flags = \"\";\n    injectFlags = (injectFlags || \"\");\n\n    if (input.global || ( /g/i ).test(injectFlags) ) { flags += \"g\"; }\n    if (input.ignoreCase || ( /i/i ).test(injectFlags) ) { flags += \"i\"; }\n    if (input.multiline || ( /m/i ).test(injectFlags) ) { flags += \"m\"; }\n\n    return(new RegExp(pattern, flags));\n}\n\nexport function unzip<A, B>(arr: Array<[A, B]>): [Array<A>, Array<B>] {\n    //let unzipped = [...arr[0]].map((_, i) => arr.map(row => row[i]));\n    //return [unzipped[0], unzipped[1]];\n    let a: Array<A> = [];\n    let b: Array<B> = [];\n    for (let [u, v] of arr) {\n        a.push(u);\n        b.push(v);\n    }\n    return [a, b];\n}\n\nexport function mask(length: number, fill: boolean): Array<boolean> {\n    return Array(length).fill(fill);\n}\n\nexport function toggle_mask(mask: Array<boolean>, i: number, value: boolean): Array<boolean> {\n    let res = [...mask];\n    res[i] = value;\n    return res;\n}\n\n","import { random_element, unzip } from \"./util\";\r\n\r\nexport class Fragment {\r\n    fragment_template: string;\r\n    meaning_template: string;\r\n\r\n    constructor(fragment_template: string, meaning_template: string) {\r\n        this.fragment_template = fragment_template;\r\n        this.meaning_template = meaning_template;\r\n    }\r\n\r\n    populate(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\r\n        let fragment = this.fragment_template.slice();\r\n        let meaning = this.meaning_template.slice();\r\n        let i = 1;\r\n        for (let m of this.fragment_template.matchAll(/\\{\\{.+?}}/g)) {\r\n            if (m) {\r\n                let token = m[0];\r\n                if (token in vocabulary && vocabulary[token].length > 0) {\r\n                    let [vocab, vocab_meaning] = random_element(vocabulary[token]);\r\n                    fragment = fragment.replace(token, vocab);\r\n                    meaning = meaning.replace(new RegExp(\"\\\\{\\\\{\" + i + \"}}\", \"g\"), vocab_meaning);\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        fragment = fragment.charAt(0).toUpperCase() + fragment.slice(1);\r\n        meaning = meaning.charAt(0).toUpperCase() + meaning.slice(1);\r\n        return [fragment, meaning];\r\n    }\r\n}\r\n\r\nexport class LangModuleMask {\r\n    enabled: Array<boolean>;\r\n    fragments: Array<boolean>;\r\n    vocabulary: Array<boolean>;\r\n\r\n    constructor(enabled: Array<boolean>, fragments: Array<boolean>, vocabulary: Array<boolean>) {\r\n        this.enabled = enabled;\r\n        this.fragments = fragments;\r\n        this.vocabulary = vocabulary;\r\n    }\r\n}\r\n\r\nexport class LangModule {\r\n    name: string;\r\n    fragments: Array<Fragment>; // with weight\r\n    vocabulary: { [pattern: string]: Array<[string, string]> };\r\n    indices: Array<number>;\r\n\r\n    constructor(\r\n        name: string,\r\n        fragments: Array<Fragment>,\r\n        vocabulary: { [pattern: string]: Array<[string, string]> },\r\n        indices: Array<number>\r\n    ) {\r\n        this.name = name;\r\n        this.fragments = fragments;\r\n        this.vocabulary = vocabulary;\r\n        this.indices = indices;\r\n    }\r\n\r\n    static empty(): LangModule {\r\n        return new LangModule(\"Empty\", [], {}, []);\r\n    }\r\n\r\n    static unzip_fragments(\r\n        json_fragments: Array<[string, string, number?]>\r\n    ): [Array<Fragment>, Array<number>] {\r\n        let fragments = [];\r\n        let weights = [];\r\n        for (let t of json_fragments) {\r\n            fragments.push(new Fragment(t[0], t[1]));\r\n            if (t[2]) {\r\n                weights.push(t[2]);\r\n            } else {\r\n                weights.push(1);\r\n            }\r\n        }\r\n        return [fragments, weights];\r\n    }\r\n\r\n    static from_json(json: any): LangModule {\r\n        let name = json.name;\r\n        unzip(json.fragments);\r\n        let [fragments, weights] = LangModule.unzip_fragments(json.fragments);\r\n        let vocabulary = json.vocabulary;\r\n        let indices: Array<number> = [];\r\n        weights.forEach((w, i) => {\r\n            [...Array(w).keys()].forEach(() => {\r\n                indices.push(i);\r\n            });\r\n        });\r\n        return new LangModule(name, fragments, vocabulary, indices);\r\n    }\r\n\r\n    static join(modules: Array<LangModule>, mask: LangModuleMask): LangModule {\r\n        let res = LangModule.empty();\r\n        modules.forEach((m, i) => {\r\n            if (mask.enabled[i]) {\r\n                if (mask.fragments[i]) {\r\n                    let shift = res.indices.length > 0 ? res.indices[res.indices.length - 1] : 0;\r\n                    res.fragments = res.fragments.concat(m.fragments);\r\n                    for (let j of m.indices) {\r\n                        res.indices.push(j + shift);\r\n                    }\r\n                }\r\n                if (mask.vocabulary[i]) {\r\n                    for (let [p, c] of Object.entries(m.vocabulary)) {\r\n                        if (p in res.vocabulary) {\r\n                            res.vocabulary[p] = res.vocabulary[p].concat(c);\r\n                        } else {\r\n                            res.vocabulary[p] = c;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    random_with_vocabulary(vocabulary: { [pattern: string]: Array<[string, string]> }): [string, string] {\r\n        if (this.fragments.length > 0) {\r\n            let i: number = random_element(this.indices);\r\n            let s: Fragment = this.fragments[i];\r\n            return s.populate(vocabulary);\r\n        } else {\r\n            return [\"...\", \"...\"];\r\n        }\r\n    }\r\n\r\n    random(): [string, string] {\r\n        return this.random_with_vocabulary(this.vocabulary);\r\n    }\r\n}\r\n","import React, { useState, Dispatch, SetStateAction } from \"react\";\nimport { Button, Col, FormControl, InputGroup, Row } from \"react-bootstrap\";\n\nexport function SourceComponent(props: { source: string, setSource: Dispatch<SetStateAction<string>> }) {\n    const [source, setSource] = [props.source, props.setSource];\n\n    const [value, setValue] = useState(source);\n\n    return (\n        <Row>\n            <Col className=\"component\">\n                <InputGroup>\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>\n                            Module Source\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        defaultValue={value}\n                        onChange={e => setValue(e.target.value)}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"outline-secondary\"\n                            onClick={() => setSource(value)}\n                        >\n                            Load\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Row>\n    );\n}\n\n","import React, { useState } from \"react\";\nimport {\n    Badge, Button, ButtonGroup, Card, Col, ListGroup, Popover, OverlayTrigger, Tooltip\n} from \"react-bootstrap\";\n\nimport { LangModule } from \"../LangModule\";\n\nexport function GeneratorComponent(props: {\n    joined: LangModule;\n    enabledMask: Array<boolean>;\n}) {\n    const joined = props.joined;\n\n    const enabledMask = props.enabledMask;\n\n    const [generated, setGenerated] = useState(\"...\");\n    const [meaning, setMeaning] = useState(\"\");\n    const [hidden, setHidden] = useState(\"...\");\n    const [swap, setSwap] = useState(false);\n\n    const some_enabled = () => enabledMask.some((e: boolean) => e);\n\n    const help = (\n        <Popover\n            id=\"help-popover\"\n        >\n            <Popover.Title as=\"h3\">Language Fragment Generator</Popover.Title>\n            <Popover.Content>\n                <p>\n                    Language modules are like individual lessons of a language class, where each module contains a list of <strong>fragments</strong> and <strong>vocabulary</strong>. Under the card title <strong>Modules</strong> is the list of available language modules, each with an <Badge variant=\"primary\">Enable</Badge> button to enable the module, a <Badge variant=\"secondary\">Fragments</Badge> button to enable the fragments of that module, and a <Badge variant=\"secondary\">Vocabulary</Badge> button to enable the vocabulary of that module. The <Badge variant=\"primary\">All</Badge> button will enable all of the modules, and the <Badge variant=\"danger\">None</Badge> button will disable them all.\n                </p>\n                <p>\n                    Fragments can be entire sentences, or can contain <strong>placeholders</strong> that will be substituted upon generation. For example, a fragment containing the <code>{\"{{noun}}\"}</code> placeholder would have a random noun inserted where the placeholder is.\n                </p>\n                <p>\n                    With one or more modules <strong>enabled</strong>, clicking the <Badge variant=\"primary\">Generate</Badge> button generates a <strong>populated</strong> fragment by first randomly selecting a fragment from any of the modules with fragments enabled, and then populating the fragment with randomly selected vocabulary from any of the language modules with vocabulary enabled.\n                </p>\n                <p>\n                    Clicking the <Badge variant=\"success\">Reveal</Badge> button will show the meaning of what was generated, and toggling on the <Badge variant=\"secondary\">Swap</Badge> button will instead first display the meaning so that revealing will show the populated fragment second.\n                </p>\n            </Popover.Content>\n        </Popover>\n    );\n\n    const disabled = (\n        <Tooltip\n            id=\"generator-buttons-tooltip\"\n            className=\"tooltip-danger\"\n        >\n            Enable at least one module\n        </Tooltip>\n    );\n\n    const onClickHandler = () => {\n        let [generated, meaning] = joined.random();\n        if (generated) {\n            [generated, meaning] = swap ? [meaning, generated] : [generated, meaning];\n            setHidden(\"...\");\n            setGenerated(generated);\n            setMeaning(meaning);\n        }\n    };\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>\n                    <span>Generator</span>\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={help}>\n                        <Button variant=\"info\">Help</Button>\n                    </OverlayTrigger>\n                </Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item id=\"generated\">\n                        {generated}\n                    </ListGroup.Item>\n                    <ListGroup.Item id=\"hidden\">\n                        {hidden}\n                    </ListGroup.Item>\n                    <OverlayTrigger\n                        placement=\"top\"\n                        show={!some_enabled()}\n                        overlay={disabled}\n                    >\n                        <ButtonGroup id=\"generator-buttons\">\n                            <Button\n                                disabled={!some_enabled()}\n                                onKeyPress={onClickHandler}\n                                onClick={onClickHandler}\n                            >\n                                Generate\n                            </Button>\n                            <Button\n                                variant=\"success\"\n                                disabled={!some_enabled()}\n                                onClick={() => setHidden(meaning)}\n                            >\n                                Reveal\n                            </Button>\n                            <Button\n                                variant=\"outline-secondary\"\n                                active={swap}\n                                disabled={!some_enabled()}\n                                onClick={() => setSwap(!swap)}\n                            >\n                                Swap\n                            </Button>\n                        </ButtonGroup>\n                    </OverlayTrigger>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n","import React from \"react\";\nimport { Container, Accordion, Card, Row, Col } from \"react-bootstrap\";\n\nimport { Fragment } from \"../LangModule\";\n\nexport function FragmentListComponent(props: any) {\n    const lang_module = props.lang_module;\n\n    const rows = lang_module.fragments.map((f: Fragment, i: number) => {\n        return (\n            <Row key={i}>\n                <Col>{f.fragment_template}</Col>\n                <Col>{f.meaning_template}</Col>\n            </Row>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <Accordion.Toggle\n                as={Card.Header}\n                className=\"small content-header\"\n                variant=\"link\"\n                eventKey=\"0\"\n            >\n                View Fragments\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                    <Card className=\"content\">\n                        <Container fluid>\n                            {rows}\n                        </Container>\n                    </Card>\n                </Card.Body>\n            </Accordion.Collapse>\n        </React.Fragment>\n    );\n}\n\n","import React from \"react\";\nimport { Accordion, Card, Col, Container, ListGroup, Row } from \"react-bootstrap\";\n\nexport function VocabularyListComponent(props: any) {\n    const lang_module = props.lang_module;\n\n    const token_rows = function(choices: Array<[string, string]>) {\n        return choices.map(([vocab, meaning], i) => {\n            return (\n                <Row key={i}>\n                    <Col>{vocab}</Col>\n                    <Col>{meaning}</Col>\n                </Row>\n            );\n        });\n    }\n\n    const vocabulary_rows = Object.entries(lang_module.vocabulary).map(([token, choices]: any, i) => {\n        return (\n            <React.Fragment key={i}>\n                <ListGroup.Item variant=\"secondary\" className=\"vocabulary-header\">{token}</ListGroup.Item>\n                <ListGroup.Item>\n                    <Container>\n                        {token_rows(choices)}\n                    </Container>\n                </ListGroup.Item>\n            </React.Fragment>\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <Accordion.Toggle\n                as={Card.Header}\n                className=\"small content-header\"\n                variant=\"link\"\n                eventKey=\"1\"\n            >\n    View Vocabulary\n</Accordion.Toggle>\n<Accordion.Collapse eventKey=\"1\">\n    <Card.Body>\n        <Card className=\"content\">\n            <ListGroup variant=\"flush\">\n        {vocabulary_rows}\n    </ListGroup>\n</Card>\n                </Card.Body>\n            </Accordion.Collapse>\n        </React.Fragment>\n    );\n}\n\n","import React from \"react\";\n\nimport { LangModule } from \"../LangModule\";\nimport { Accordion, Card, ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { FragmentListComponent } from \"./FragmentList\";\nimport { VocabularyListComponent } from \"./VocabularyList\";\n\nexport function LangModuleComponent(\n    //props: any\n    props: {\n        lang_module: LangModule;\n\n        enabledFlag: boolean;\n        setEnabledFlag: (checked: boolean) => void;\n\n        fragmentFlag: boolean;\n        setFragmentFlag: (checked: boolean) => void;\n\n        vocabFlag: boolean;\n        setVocabFlag: (checked: boolean) => void;\n    }\n) {\n    // Modules state\n    const lang_module = props.lang_module;\n    // Mask states\n    const [enabledFlag, setEnabledFlag] = [props.enabledFlag, props.setEnabledFlag];\n    const [fragmentFlag, setFragmentFlag] = [props.fragmentFlag, props.setFragmentFlag];\n    const [vocabFlag, setVocabFlag] = [props.vocabFlag, props.setVocabFlag];\n\n    const has_fragments = !!fragmentFlag;\n    const has_vocabulary = !!vocabFlag;\n\n    return (\n        <Accordion className=\"module\">\n            <Card>\n                <Card.Header>\n                    {lang_module.name}\n                </Card.Header>\n                <Card.Body id=\"module-control\">\n                    <ButtonGroup\n                        toggle className=\"module-controls\"\n                    >\n                        <ToggleButton\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            value={0}\n        checked={enabledFlag}\n        onChange={(e) => setEnabledFlag(e.currentTarget.checked)}\n    >\n        Enable\n    </ToggleButton>\n    <ToggleButton\n        type=\"checkbox\"\n        variant=\"outline-secondary\"\n        size=\"sm\"\n        value={1}\n        checked={fragmentFlag}\n        disabled={has_fragments && !enabledFlag}\n        onChange={(e) => setFragmentFlag(e.currentTarget.checked)}\n    >\n        Fragments\n    </ToggleButton>\n    <ToggleButton\n        type=\"checkbox\"\n        variant=\"outline-secondary\"\n        size=\"sm\"\n        value={2}\n        checked={vocabFlag}\n        disabled={has_vocabulary && !enabledFlag}\n        onChange={(e) => setVocabFlag(e.currentTarget.checked)}\n    >\n        Vocabulary\n    </ToggleButton>\n</ButtonGroup>\n                </Card.Body>\n            </Card>\n            <Card>\n                <FragmentListComponent lang_module={lang_module} />\n                <VocabularyListComponent lang_module={lang_module} />\n            </Card>\n        </Accordion>\n    );\n}\n\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { Button, Card, Col, ListGroup } from \"react-bootstrap\";\n\nimport { mask, toggle_mask } from \"../util\";\nimport { LangModule } from \"../LangModule\";\nimport { LangModuleComponent } from \"./LangModule\";\n\nexport function ModulesComponent(props: {\n    modules: Array<LangModule>;\n\n    enabledMask: Array<boolean>;\n    setEnabledMask: Dispatch<SetStateAction<Array<boolean>>>;\n\n    fragmentMask: Array<boolean>;\n    setFragmentMask: Dispatch<SetStateAction<Array<boolean>>>;\n\n    vocabMask: Array<boolean>;\n    setVocabMask: Dispatch<SetStateAction<Array<boolean>>>;\n}) {\n    // Modules state\n    const modules = props.modules;\n    // Mask states\n    const [enabledMask, setEnabledMask] = [props.enabledMask, props.setEnabledMask];\n    const [fragmentMask, setFragmentMask] = [props.fragmentMask, props.setFragmentMask];\n    const [vocabMask, setVocabMask] = [props.vocabMask, props.setVocabMask];\n\n    // Helper to toggle all modules\n    const toggleAll = function(checked: boolean) {\n        setEnabledMask(mask(modules.length, checked));\n    }\n\n    let module_components = modules.map((lang_module: LangModule, i: number) => {\n        return <LangModuleComponent\n            key={i}\n            lang_module={lang_module}\n\n            enabledFlag={enabledMask[i]}\n            setEnabledFlag={(checked: boolean) => setEnabledMask(toggle_mask(enabledMask, i, checked))}\n\n            setFragmentFlag={(checked: boolean) => setFragmentMask(toggle_mask(fragmentMask, i, checked))}\n            fragmentFlag={fragmentMask[i]}\n\n            vocabFlag={vocabMask[i]}\n            setVocabFlag={(checked: boolean) => setVocabMask(toggle_mask(vocabMask, i, checked))}\n        />;\n    });\n\n    return (\n        <Col className=\"component\">\n            <Card>\n                <Card.Header>\n                    <span>Modules</span>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => toggleAll(true)}\n                    >\n                        All\n                    </Button>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => toggleAll(false)}\n                    >\n                        None\n                    </Button>\n                </Card.Header>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <div id=\"module-list\">{module_components}</div>\n                    </ListGroup.Item>\n                </ListGroup>\n            </Card>\n        </Col>\n    );\n}\n\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\n\r\nimport { mask } from \"./util\";\r\nimport { LangModule, LangModuleMask } from \"./LangModule\";\r\nimport { SourceComponent } from \"./components/Source\";\r\nimport { GeneratorComponent } from \"./components/Generator\";\r\nimport { ModulesComponent } from \"./components/Modules\";\r\n\r\n// Default source for language module data\r\nconst DEFAULT_SOURCE = \"https://raw.githubusercontent.com/nilsso/nilsso.github.io/code/static/apps/lang_modules/japanese_modules.json\";\r\n//const DEFAULT_SOURCE = \"https://raw.githubusercontent.com/nilsso/nilsso.github.io/code/static/apps/lang_modules/japanese_modules_test.json\";\r\n//const DEFAULT_SOURCE = \"https://gist.githubusercontent.com/nilsso/bdf52edd7e207b9fb3ccdb74fd774973/raw/\";\r\n\r\n// Fetch (\"GET\" request) file from URL and parse a JSON\r\nasync function requestJSON(url: string) {\r\n    var module_data;\r\n    await fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => module_data = data)\r\n        .catch(e => alert(\"Invalid source URL\\n\" + e));\r\n    if (module_data) {\r\n        return module_data;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    // Module source\r\n    const [source, setSource] = useState(DEFAULT_SOURCE);\r\n    // Modules\r\n    const [modules, setModules] = useState(Array<LangModule>(0));\r\n    // Joined module\r\n    const [joined, setJoined] = useState(LangModule.empty());\r\n    // Module masks\r\n    const [enabledMask, setEnabledMask] = useState(mask(0, false));\r\n    const [fragmentMask, setFragmentMask] = useState(mask(0, true));\r\n    const [vocabMask, setVocabMask] = useState(mask(0, true));\r\n\r\n    // If module source changed build new modules\r\n    useEffect(() => {\r\n        requestJSON(source).then(data => setModules(data.map(json => LangModule.from_json(json))));\r\n    }, [source]);\r\n\r\n    // If modules changed update the module masks\r\n    useEffect(() => {\r\n        setEnabledMask(mask(modules.length, false));\r\n        setFragmentMask(mask(modules.length, true));\r\n        setVocabMask(mask(modules.length, true));\r\n    }, [modules]);\r\n\r\n    // If module masks changed update the joined module\r\n    useEffect(() => {\r\n        if (modules.length > 0) {\r\n            setJoined(LangModule.join(modules, new LangModuleMask(enabledMask, fragmentMask, vocabMask)));\r\n        }\r\n    }, [modules, enabledMask, fragmentMask, vocabMask]);\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <GeneratorComponent joined={joined} enabledMask={enabledMask} />\r\n                <ModulesComponent\r\n                    modules={modules}\r\n\r\n                    enabledMask={enabledMask}\r\n                    setEnabledMask={setEnabledMask}\r\n\r\n                    fragmentMask={fragmentMask}\r\n                    setFragmentMask={setFragmentMask}\r\n\r\n                    vocabMask={vocabMask}\r\n                    setVocabMask={setVocabMask}\r\n                />\r\n            </Row>\r\n            <SourceComponent source={source} setSource={setSource} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}